I"ˆ<h1 id="liste-de-questions-javascript-avanc√©e">Liste de questions JavaScript (Avanc√©e)</h1>

<p>De la base aux subtilit√©s du langage : testez votre compr√©hension de JavaScript, rafra√Æchissez vos connaissances, ou pr√©parez-vous pour un entretien technique ! :muscle: :rocket: Je mets √† jour ce d√©p√¥t chaque semaine avec des nouvelles questions. Derni√®re mise √† jour : <a href="#20190629"><strong>29 juin</strong></a></p>

<p>Les r√©ponses se trouvent dans les sections repli√©es en dessous des questions, cliquez simplement dessus pour les faire appara√Ætre. Bonne chance!</p>

<h6 id="1-quelle-est-la-sortie-">1. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">age</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">21</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">sayHi</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">Lydia</code> et <code class="highlighter-rouge">undefined</code></li>
  <li>B: <code class="highlighter-rouge">Lydia</code> et <code class="highlighter-rouge">ReferenceError</code></li>
  <li>C: <code class="highlighter-rouge">ReferenceError</code> et <code class="highlighter-rouge">21</code></li>
  <li>D: <code class="highlighter-rouge">undefined</code> et <code class="highlighter-rouge">ReferenceError</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>

<p>

##R√©ponse : D

Dans la fonction, nous d√©clarons en premier la variable <code class="highlighter-rouge">name</code> gr√¢ce au mot cl√© <code class="highlighter-rouge">var</code>. Cela signifie que la variable est ‚Äúlev√©e‚Äù <em>(hoisted)</em> (l‚Äôespace m√©moire est d√©finie √† la phase de cr√©ation) avec pour valeur par d√©faut <code class="highlighter-rouge">undefined</code>, jusqu‚Äô√† ce que le script atteigne la ligne de d√©finition de la variable. Nous n‚Äôavons pas encore d√©fini la variable lorsque nous essayons d‚Äôafficher la variable <code class="highlighter-rouge">name</code>, donc elle a toujours la valeur <code class="highlighter-rouge">undefined</code>.

Les variables avec le mot cl√© <code class="highlighter-rouge">let</code> (et <code class="highlighter-rouge">const</code>) sont ‚Äúlev√©es‚Äù <em>(hoisted)</em>, mais contrairement √† <code class="highlighter-rouge">var</code>, elle n‚Äôest pas <i>initialis√©e</i>. Elles ne sont pas accessible avant la ligne qui les d√©clare (initialise). C‚Äôest appel√© la ‚Äúzone morte temporaire‚Äù. Lorsque nous essayons d‚Äôacc√©der aux variables avant leur d√©claration, JavaScript renvoie une <code class="highlighter-rouge">ReferenceError</code>.

</p>
</details>

<hr />

<h6 id="2-quelle-est-la-sortie-">2. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">0 1 2</code> et <code class="highlighter-rouge">0 1 2</code></li>
  <li>B: <code class="highlighter-rouge">0 1 2</code> et <code class="highlighter-rouge">3 3 3</code></li>
  <li>C: <code class="highlighter-rouge">3 3 3</code> et <code class="highlighter-rouge">0 1 2</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

√Ä cause du syst√®me de queue dans JavaScript, la fonction de rappel <em>(callback)</em> du <code class="highlighter-rouge">setTimeout</code> est appel√©e <em>apr√®s</em> que la boucle soit ex√©cut√©e. Comme la variable <code class="highlighter-rouge">i</code> dans la premi√®re boucle est d√©clar√©e avec le mot-cl√© <code class="highlighter-rouge">var</code>, c‚Äôest une variable globale. Pendant la boucle, nous incr√©mentons la valeur de <code class="highlighter-rouge">i</code> de <code class="highlighter-rouge">1</code> √† chaque fois, en utilisant l‚Äôop√©rateur arithm√©tique <code class="highlighter-rouge">++</code>. Lorsque la fonction de rappel <em>(callback)</em> du <code class="highlighter-rouge">setTimeout</code> est invoqu√©e, <code class="highlighter-rouge">i</code> est √©gal √† <code class="highlighter-rouge">3</code> dans le premier exemple.

Dans la seconde boucle, la variable <code class="highlighter-rouge">i</code> est d√©clar√©e avec le mot cl√© <code class="highlighter-rouge">let</code> : les variables d√©clar√©es avec <code class="highlighter-rouge">let</code> (et <code class="highlighter-rouge">const</code>) ont une port√©e de bloc (tout ce qui est entre <code class="highlighter-rouge">{ }</code> est consid√©r√© comme un bloc). Pendant chaque it√©ration, <code class="highlighter-rouge">i</code> aura une nouvelle valeur, et chaque valeur sera d√©finie dans la boucle.

</p>
</details>

<hr />

<h6 id="3-quelle-est-la-sortie-">3. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">shape</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">radius</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="nx">diameter</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
  <span class="p">},</span>
  <span class="na">perimeter</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span>
<span class="p">};</span>

<span class="nx">shape</span><span class="p">.</span><span class="nx">diameter</span><span class="p">();</span>
<span class="nx">shape</span><span class="p">.</span><span class="nx">perimeter</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">20</code> et <code class="highlighter-rouge">62.83185307179586</code></li>
  <li>B: <code class="highlighter-rouge">20</code> et <code class="highlighter-rouge">NaN</code></li>
  <li>C: <code class="highlighter-rouge">20</code> et <code class="highlighter-rouge">63</code></li>
  <li>D: <code class="highlighter-rouge">NaN</code> et <code class="highlighter-rouge">63</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

Notez que la valeur de <code class="highlighter-rouge">diameter</code> est une fonction r√©guli√®re, alors que celle de <code class="highlighter-rouge">perimeter</code> est une fonction fl√©ch√©e.

Avec les fonctions fl√©ch√©e, le mot cl√© <code class="highlighter-rouge">this</code> r√©f√®re √† son p√©rim√®tre actuel, contrairement aux fonctions r√©guli√®res ! Cela signifie que lorsque nous appelons <code class="highlighter-rouge">perimeter</code>, elle ne r√©f√®re pas √† l‚Äôobjet <code class="highlighter-rouge">shape</code>, mais √† son p√©rim√®tre actuel (<code class="highlighter-rouge">window</code> par exemple).

Il n‚Äôy a pas de valeur <code class="highlighter-rouge">radius</code> dans cet objet, on retournera <code class="highlighter-rouge">undefined</code>.

</p>
</details>

<hr />

<h6 id="4-quelle-est-la-sortie-">4. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">+</span><span class="kc">true</span><span class="p">;</span>
<span class="o">!</span><span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">1</code> et <code class="highlighter-rouge">false</code></li>
  <li>B: <code class="highlighter-rouge">false</code> et <code class="highlighter-rouge">NaN</code></li>
  <li>C: <code class="highlighter-rouge">false</code> et <code class="highlighter-rouge">false</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

L‚Äôop√©rateur arithm√©tique <code class="highlighter-rouge">+</code> essait de convertir un op√©rande en une valeur num√©rique. <code class="highlighter-rouge">true</code> devient <code class="highlighter-rouge">1</code>, et <code class="highlighter-rouge">false</code> devient <code class="highlighter-rouge">0</code>.

La cha√Æne de caract√®re <code class="highlighter-rouge">'Lydia'</code> est une valeur consid√©r√©e comme vraie <em>(truthy)</em>. Ce que nous sommes actuellement en train de demander, c‚Äôest ‚Äúest-ce que cette valeur consid√©r√©e comme vraie est fausse ?‚Äù. Ce qui retournera <code class="highlighter-rouge">false</code>.

</p>
</details>

<hr />

<h6 id="5-laquelle-est-vraie-">5. Laquelle est vraie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">bird</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">size</span><span class="p">:</span> <span class="dl">"</span><span class="s2">small</span><span class="dl">"</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">mouse</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Mickey</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">small</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">mouse.bird.size</code> n‚Äôest pas valide</li>
  <li>B: <code class="highlighter-rouge">mouse[bird.size]</code> n‚Äôest pas valide</li>
  <li>C: <code class="highlighter-rouge">mouse[bird["size"]]</code> n‚Äôest pas valide</li>
  <li>D: Toutes sont valides</li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

En JavaScript, toutes les cl√©s d‚Äôobjet sont des cha√Ænes de caract√®res (sauf si c‚Äôest un Symbol). Bien que nous ne puissions pas les <em>typer</em> comme des cha√Ænes de caract√®res, elles sont converties en cha√Ænes de caract√®res sous le capot.

JavaScript interpr√®te (ou d√©compresse) les instructions. Lorsque nous utilisons la notation pas crochet, il voit le premier crochet <code class="highlighter-rouge">[</code> et continue jusqu‚Äô√† ce qu‚Äôil trouve le crochet fermant <code class="highlighter-rouge">]</code>. Seulement apr√®s, il √©value l‚Äôinstruction.

<code class="highlighter-rouge">mouse[bird.size]</code> : Premi√®rement, il √©value <code class="highlighter-rouge">bird.size</code>, qui est <code class="highlighter-rouge">"small"</code>. <code class="highlighter-rouge">mouse["small"]</code> retourne <code class="highlighter-rouge">true</code>.

Cependant, avec la notation par points, cela n‚Äôarrive pas. <code class="highlighter-rouge">mouse</code> n‚Äôa pas de cl√© appel√©e <code class="highlighter-rouge">bird</code>, ce qui signifie que <code class="highlighter-rouge">mouse.bird</code> est <code class="highlighter-rouge">undefined</code>. Puis, on demande <code class="highlighter-rouge">size</code> en utilisant la notation par point : <code class="highlighter-rouge">mouse.bird.size</code>. Comme <code class="highlighter-rouge">mouse.bird</code> est <code class="highlighter-rouge">undefined</code>, on demande <code class="highlighter-rouge">undefined.size</code>. Cela n‚Äôest pas valide, et nous aurons une erreur similaire √† <code class="highlighter-rouge">Impossible de lire la propri√©t√© "size" de undefined</code>.

</p>
</details>

<hr />

<hr />

<h6 id="6-quelle-est-la-sortie-">6. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{</span> <span class="na">greeting</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Hey!</span><span class="dl">"</span> <span class="p">};</span>
<span class="kd">let</span> <span class="nx">d</span><span class="p">;</span>

<span class="nx">d</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>
<span class="nx">c</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">greeting</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">Hello</code></li>
  <li>B: <code class="highlighter-rouge">Hey</code></li>
  <li>C: <code class="highlighter-rouge">undefined</code></li>
  <li>D: <code class="highlighter-rouge">ReferenceError</code></li>
  <li>E: <code class="highlighter-rouge">TypeError</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

En JavaScript, tous les objets interagissent par <em>r√©f√©rence</em> lorsqu‚Äôon les d√©finit √©gaux les uns aux autres.

Premi√®rement, la variable <code class="highlighter-rouge">c</code> contaient une valeur d‚Äôobjet. Plus tard, nous assignons <code class="highlighter-rouge">d</code> avec la m√™me r√©f√©rence que <code class="highlighter-rouge">c</code> √† l‚Äôobjet.

<img src="https://i.imgur.com/ko5k0fs.png" width="200" />

Quand on modifie un objet, on les modifie donc tous.

</p>
</details>

<hr />

<h6 id="7-quelle-est-la-sortie-">7. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span> <span class="o">===</span> <span class="nx">c</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">true</code></li>
  <li>B: <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">true</code></li>
  <li>C: <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">false</code></li>
  <li>D: <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">true</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

<code class="highlighter-rouge">new Number()</code> est une fonction globale. Bien qu‚Äôil ressemble √† un nombre, ce n‚Äôen est pas vraiment un : il a une poign√©e de fonctionnalit√©s suppl√©mentaire et est un objet.

Quand nous utilisons l‚Äôop√©rateur <code class="highlighter-rouge">==</code>, il v√©rifie seulement qu‚Äôil s‚Äôagisse de la m√™me <em>valeur</em>. Les deux ont pour valeur <code class="highlighter-rouge">3</code>, donc il retourne <code class="highlighter-rouge">true</code>.

Cependant, quand on utilise l‚Äôop√©rateur <code class="highlighter-rouge">===</code>, les 2 valeurs <em>et</em> types doivent √™tre les m√™mes. <code class="highlighter-rouge">new Number()</code> n‚Äôest pas un nombre, c‚Äôest un <strong>objet</strong>, il retourne <code class="highlighter-rouge">false</code>.

</p>
</details>

<hr />

<h6 id="8-quelle-est-la-sortie-">8. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Chameleon</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">colorChange</span><span class="p">(</span><span class="nx">newColor</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">newColor</span> <span class="o">=</span> <span class="nx">newColor</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">newColor</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">constructor</span><span class="p">({</span> <span class="nx">newColor</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span> <span class="p">}</span> <span class="o">=</span> <span class="p">{})</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">newColor</span> <span class="o">=</span> <span class="nx">newColor</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">freddie</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chameleon</span><span class="p">({</span> <span class="na">newColor</span><span class="p">:</span> <span class="dl">"</span><span class="s2">purple</span><span class="dl">"</span> <span class="p">});</span>
<span class="nx">freddie</span><span class="p">.</span><span class="nx">colorChange</span><span class="p">(</span><span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">orange</code></li>
  <li>B: <code class="highlighter-rouge">purple</code></li>
  <li>C: <code class="highlighter-rouge">green</code></li>
  <li>D: <code class="highlighter-rouge">TypeError</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : D

La fonction <code class="highlighter-rouge">colorChange</code> est statique. Les m√©thodes statiques sont d√©sign√©es pour vivre seulement dans le constructeur qui les a cr√©√© et ne peuvent pas √™tre transf√©rer aux enfants. Comme <code class="highlighter-rouge">freddie</code> est un enfant, la fonction n‚Äôest pas transf√©r√©e et n‚Äôest pas disponible dans l‚Äôinstance de <code class="highlighter-rouge">freddie</code> : une erreur <code class="highlighter-rouge">TypeError</code> est renvoy√©e.

</p>
</details>

<hr />

<h6 id="9-quelle-est-la-sortie-">9. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">greeting</span><span class="p">;</span>
<span class="nx">greetign</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// Typo!</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greetign</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">{}</code></li>
  <li>B: <code class="highlighter-rouge">ReferenceError: greetign is not defined</code></li>
  <li>C: <code class="highlighter-rouge">undefined</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

Il affiche l‚Äôobjet, car on a juste cr√©√© un objet vide dans l‚Äôobjet global ! Quand on √©crit mal <code class="highlighter-rouge">greeting</code> en <code class="highlighter-rouge">greetign</code>, JavaScript l‚Äôinterpr√®te comme il le voit <code class="highlighter-rouge">global.greetign = {}</code> (ou <code class="highlighter-rouge">window.greetign = {}</code> dans le navigateur).

Pour √©viter cela, on peut utiliser <code class="highlighter-rouge">"use strict"</code>. Cela nous assure de devoir d√©clarer la variable avant de lui assigner une valeur.

</p>
</details>

<hr />

<h6 id="10-que-se-passe-t-il-lorsque-nous-faisons-√ßa-">10. Que se passe-t-il lorsque nous faisons √ßa ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">bark</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Woof!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">bark</span><span class="p">.</span><span class="nx">animal</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">dog</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>A: Rien, c‚Äôest tout √† fait bon !</li>
  <li>B: <code class="highlighter-rouge">SyntaxError</code>. Vous ne pouvez pas ajouter de propri√©t√©s √† une fonction de cette fa√ßon.</li>
  <li>C: <code class="highlighter-rouge">undefined</code></li>
  <li>D: <code class="highlighter-rouge">ReferenceError</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p marksown="1">

#### R√©ponse : A

C'est possible en JavaScript, car les fonctions sont des objets ! (Tout ce qui n'est pas de type primitif est un objet)

Une fonction est un type sp√©cial d'objet. Le code que vous √©crivez vous-m√™me n'est pas la fonction. La fonction est un objet avec des propri√©t√©s. Cette propri√©t√© est invocable.

</p>
</details>

<hr />

<h6 id="11-quelle-est-la-sortie-">11. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Hallie</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">Person</span><span class="p">.</span><span class="nx">getFullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">member</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">());</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">TypeError</code></li>
  <li>B: <code class="highlighter-rouge">SyntaxError</code></li>
  <li>C: <code class="highlighter-rouge">Lydia Hallie</code></li>
  <li>D: <code class="highlighter-rouge">undefined</code> <code class="highlighter-rouge">undefined</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

Vous ne pouvez pas ajouter de propri√©t√©s √† un constructeur comme pour des objets normaux. Si vous voulez ajouter une fonctionnalit√© pour tous les objets en une fois, vous devez utiliser le prototype. Donc dans ce cas,

<code class="highlighter-rouge">js
Person.prototype.getFullName = function() {
  return `${this.firstName} ${this.lastName}`;
};
</code>

rendra fonctionnel <code class="highlighter-rouge">member.getFullName</code>. Pourquoi est-ce b√©n√©fique ? Disons que nous ajoutons cette m√©thode au constructeur directement. Peut-√™tre que toutes les instances de <code class="highlighter-rouge">Person</code> n‚Äôont pas besoin de cette m√©thode. Cela fera perdre de l‚Äôespace m√©moire, car elles auront tous cette propri√©t√©, ce qui prendra de l‚Äôespace m√©moire pour chaque instance. Alors que, si nous ajoutons la m√©thode au prototype uniquement, nous n‚Äôutilisons qu‚Äôun seul slot m√©moire, et ils y auront tous acc√®s !

</p>
</details>

<hr />

<h6 id="12-quelle-est-la-sortie-">12. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">lydia</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Hallie</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">sarah</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">"</span><span class="s2">Sarah</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Smith</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lydia</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sarah</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">Person {firstName: "Lydia", lastName: "Hallie"}</code> et <code class="highlighter-rouge">undefined</code></li>
  <li>B: <code class="highlighter-rouge">Person {firstName: "Lydia", lastName: "Hallie"}</code> et <code class="highlighter-rouge">Person {firstName: "Sarah", lastName: "Smith"}</code></li>
  <li>C: <code class="highlighter-rouge">Person {firstName: "Lydia", lastName: "Hallie"}</code> et <code class="highlighter-rouge">{}</code></li>
  <li>D:<code class="highlighter-rouge">Person {firstName: "Lydia", lastName: "Hallie"}</code> et <code class="highlighter-rouge">ReferenceError</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

Pour <code class="highlighter-rouge">sarah</code>, nous n‚Äôavons pas utilis√© le mot cl√© <code class="highlighter-rouge">new</code>. Quand nous utilisons <code class="highlighter-rouge">new</code>, il fait r√©f√©rence √† un nouvel objet vide que nous cr√©ons. Cependant, nous n‚Äôajoutons pas <code class="highlighter-rouge">new</code>. Il r√©f√®re √† <strong>l‚Äôobjet global</strong> !

Nous disons que <code class="highlighter-rouge">this.firstName</code> est √©gal √† <code class="highlighter-rouge">"Sarah"</code> et que <code class="highlighter-rouge">this.lastName</code> est √©gal √† <code class="highlighter-rouge">Smith</code>. Ce que nous faisons c‚Äôest d√©finir <code class="highlighter-rouge">global.firstName = 'Sarah'</code> et <code class="highlighter-rouge">global.lastName = 'Smith'</code>. La variable <code class="highlighter-rouge">sarah</code> elle-m√™me reste √† <code class="highlighter-rouge">undefined</code>.

</p>
</details>

<hr />

<h6 id="13-quelle-sont-les-trois-phases-de-propagation-des-√©v√©nements-">13. Quelle sont les trois phases de propagation des √©v√©nements ?</h6>

<ul>
  <li>A: Target &gt; Capturing &gt; Bubbling</li>
  <li>B: Bubbling &gt; Target &gt; Capturing</li>
  <li>C: Target &gt; Bubbling &gt; Capturing</li>
  <li>D: Capturing &gt; Target &gt; Bubbling</li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : D

Durant la phase de <strong>capture</strong> <em>(capturing)</em>, l‚Äô√©v√©nement passe par les √©l√©ments parents jusqu‚Äô√† l‚Äô√©l√©ment cibl√©. Il atteint ensuite l‚Äô√©l√©ment <strong>cibl√©</strong> <em>(target)</em>, et commence √† <strong>bouillonner</strong> <em>(bubbling)</em>.

<img src="https://i.imgur.com/N18oRgd.png" width="200" />

</p>
</details>

<hr />

<h6 id="14-tous-les-objets-ont-des-prototypes">14. Tous les objets ont des prototypes.</h6>

<ul>
  <li>A: vrai</li>
  <li>B: faux</li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

Tous les objets ont des prototypes, except√© pour les <strong>objets standards</strong>. Les objets standards ont acc√®s √† certaines m√©thodes et propri√©t√©s, comme <code class="highlighter-rouge">.toString</code>. C‚Äôest pour cette raison que vous pouvez utiliser les m√©thodes natives de JavaScript ! Toutes ces m√©thodes sont disponibles dans le prototype. Bien que JavaScript ne trouve pas la fonction dans l‚Äôobjet, il parcourt le prototype et la m√©thode afin de la rendre accessible.

</p>
</details>

<hr />

<h6 id="15-quelle-est-la-sortie-">15. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">NaN</code></li>
  <li>B: <code class="highlighter-rouge">TypeError</code></li>
  <li>C: <code class="highlighter-rouge">"12"</code></li>
  <li>D: <code class="highlighter-rouge">3</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

JavaScript est un **langage √† types dynamiques** : nous n'avons pas besoin de sp√©cifier le types des variables. Les valeurs peuvent √™tre automatiquement converties vers les autres types sans que vous le sachiez, c'est ce que l'on appelle _la conversion de types implicites_ _(implicit type coercion)_.

Dans cette exemple, JavaScript convertit le nombre `1` en une cha√Æne de caract√®re, afin que la fonction ait du sens et puisse renvoyer une valeur. Durant l'addition d'un type num√©rique (`1`) et d'un type cha√Æne de caract√®re (`'2'`), le nombre est trait√© comme une cha√Æne de caract√®re. Nous pouvons concat√©ner les cha√Ænes de caract√®res comme `"Hello" + "World"`, c'est donc ce qui arrive ici avec `"1" + "2"` qui retourne `"12"`.

</p>
</details>

<hr />

<h6 id="16-quelle-est-la-sortie-">16. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="o">++</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">++</span><span class="nx">number</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">1</code> <code class="highlighter-rouge">1</code> <code class="highlighter-rouge">2</code></li>
  <li>B: <code class="highlighter-rouge">1</code> <code class="highlighter-rouge">2</code> <code class="highlighter-rouge">2</code></li>
  <li>C: <code class="highlighter-rouge">0</code> <code class="highlighter-rouge">2</code> <code class="highlighter-rouge">2</code></li>
  <li>D: <code class="highlighter-rouge">0</code> <code class="highlighter-rouge">1</code> <code class="highlighter-rouge">2</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

L‚Äôop√©rateur arithm√©tique <strong>postfix</strong> <code class="highlighter-rouge">++</code> :

1. Retourne la valeur (ici il retourne <code class="highlighter-rouge">0</code>)
2. Incr√©mente la valeur (le nombre est maintenant √©gal √† <code class="highlighter-rouge">1</code>)

L‚Äôop√©rateur arithm√©tique <strong>pr√©fix</strong> <code class="highlighter-rouge">++</code> :

1. Incr√©mente la valeur (le nombre est maintenant √©gal √† <code class="highlighter-rouge">2</code>)
2. Retourne la valeur (ici il retourne <code class="highlighter-rouge">2</code>)

Cela retourne donc <code class="highlighter-rouge">0 2 2</code>.

</p>
</details>

<hr />

<h6 id="17-quelle-est-la-sortie-">17. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getPersonInfo</span><span class="p">(</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">,</span> <span class="nx">three</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">one</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">two</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">three</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">21</span><span class="p">;</span>

<span class="nx">getPersonInfo</span><span class="s2">`</span><span class="p">${</span><span class="nx">person</span><span class="p">}</span><span class="s2"> is </span><span class="p">${</span><span class="nx">age</span><span class="p">}</span><span class="s2"> years old`</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">"Lydia"</code> <code class="highlighter-rouge">21</code> <code class="highlighter-rouge">["", " is ", " years old"]</code></li>
  <li>B: <code class="highlighter-rouge">["", " is ", " years old"]</code> <code class="highlighter-rouge">"Lydia"</code> <code class="highlighter-rouge">21</code></li>
  <li>C: <code class="highlighter-rouge">"Lydia"</code> <code class="highlighter-rouge">["", " is ", " years old"]</code> <code class="highlighter-rouge">21</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

Si vous utilisez les litt√©raux de gabarits, la valeur du premier argument sera toujours un tableau de valeurs des cha√Ænes de caract√®re. Le reste des arguments seront les valeurs des expressions utilis√©es !

</p>
</details>

<hr />

<h6 id="18-quelle-est-la-sortie-">18. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">checkAge</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">data</span> <span class="o">===</span> <span class="p">{</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span> <span class="p">})</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Vous √™tes un adulte !</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">data</span> <span class="o">==</span> <span class="p">{</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span> <span class="p">})</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Vous √™tes toujours un adulte.</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hmm.. Vous n'avez pas l'√¢ge, je suppose.`</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">checkAge</span><span class="p">({</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span> <span class="p">});</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">Vous √™tes un adulte !</code></li>
  <li>B: <code class="highlighter-rouge">Vous √™tes toujours un adulte.</code></li>
  <li>C: <code class="highlighter-rouge">Hmm.. Vous n'avez pas l'√¢ge, je suppose.</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

Lorsque l‚Äôon teste une √©galit√©, les primitifs sont compar√©s par leur valeur, alors que les objets sont compar√©s par leur <em>r√©f√©rence</em>. JavaScript v√©rifie si les objets ont une r√©f√©rence √† la m√™me zone de la m√©moire.=

Les 2 objets que nous comparons n‚Äôont pas √ßa : l‚Äôobjet pass√© en param√®tre fait r√©f√©rence √† une zone m√©moire diff√©rente que l‚Äôobjet que nous utilisons pour faire la comparaison.

C‚Äôest pourquoi les 2 conditions <code class="highlighter-rouge">{ age: 18 } === { age: 18 }</code> et <code class="highlighter-rouge">{ age: 18 } == { age: 18 }</code> retournent <code class="highlighter-rouge">false</code>.

</p>
</details>

<hr />

<h6 id="19-quelle-est-la-sortie-">19. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getAge</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">args</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">getAge</span><span class="p">(</span><span class="mi">21</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">"number"</code></li>
  <li>B: <code class="highlighter-rouge">"array"</code></li>
  <li>C: <code class="highlighter-rouge">"object"</code></li>
  <li>D: <code class="highlighter-rouge">"NaN"</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

La syntaxe des param√®tres du reste <em>(rest parameters)</em> (<code class="highlighter-rouge">...args</code>) retourne un tableau avec les arguments. Un tableau est un objet, donc <code class="highlighter-rouge">typeof args</code> retournera <code class="highlighter-rouge">"object"</code>.

</p>
</details>

<hr />

<h6 id="20-quelle-est-la-sortie-">20. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getAge</span><span class="p">()</span> <span class="p">{</span>
  <span class="dl">"</span><span class="s2">use strict</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">age</span> <span class="o">=</span> <span class="mi">21</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">age</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">getAge</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">21</code></li>
  <li>B: <code class="highlighter-rouge">undefined</code></li>
  <li>C: <code class="highlighter-rouge">ReferenceError</code></li>
  <li>D: <code class="highlighter-rouge">TypeError</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

Avec <code class="highlighter-rouge">"use strict"</code>, vous pouvez √™tes s√ªr de ne pas d√©clarer accidentellement des variables gloables. Nous ne d√©clarerons jamais la variable <code class="highlighter-rouge">age</code>, et temps que nous utiliserons <code class="highlighter-rouge">"use strict"</code>, cela cr√©era une erreur de r√©f√©rence. Si nous n‚Äôutilisons pas <code class="highlighter-rouge">"use strict"</code>, cela fonctionnera et la variable <code class="highlighter-rouge">age</code> sera attribu√© √† l‚Äôobjet global.

</p>
</details>

<hr />

<h6 id="21-quelle-est-la-valeur-de-sum-">21. Quelle est la valeur de <code class="highlighter-rouge">sum</code> ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="dl">"</span><span class="s2">10*10+5</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">105</code></li>
  <li>B: <code class="highlighter-rouge">"105"</code></li>
  <li>C: <code class="highlighter-rouge">TypeError</code></li>
  <li>D: <code class="highlighter-rouge">"10*10+5"</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

<code class="highlighter-rouge">eval</code> √©value les codes que nous passons en param√®tre de type cha√Æne de caract√®res. Si c‚Äôest une expression, comme dans notre cas, il √©valuera l‚Äôexpression. L‚Äôexpression est <code class="highlighter-rouge">10 * 10 + 5</code>, ce qui retourne le nombre <code class="highlighter-rouge">105</code>.

</p>
</details>

<hr />

<h6 id="22-pendant-combien-de-temps-cool_secret-sera-t-il-accessible-">22. Pendant combien de temps <code class="highlighter-rouge">cool_secret</code> sera-t-il accessible ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">cool_secret</span><span class="dl">"</span><span class="p">,</span> <span class="mi">123</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: Pour toujours, les donn√©es ne seront pas perdues.</li>
  <li>B: Jusqu‚Äô√† ce que l‚Äôutilisateur ferme l‚Äôonglet.</li>
  <li>C: Jusqu‚Äô√† ce que l‚Äôutilisateur ferme son navigateur en entier, pas seulement son onglet.</li>
  <li>D: Jusqu‚Äô√† ce que l‚Äôutilisateur √©teindra son ordinateur.</li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

La donn√©e stock√© dans le `sessionStorage` est supprim√©e apr√®s la fermeture de l'onglet.

Si vous utilisez le `localStorage`, la donn√©e sera l√† pour toujours, jusqu'√† ce que, par exemple, `localStorage.clear()` soit invoqu√©e.

</p>
</details>

<hr />

<h6 id="23-quelle-est-la-sortie-">23. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">8</code></li>
  <li>B: <code class="highlighter-rouge">10</code></li>
  <li>C: <code class="highlighter-rouge">SyntaxError</code></li>
  <li>D: <code class="highlighter-rouge">ReferenceError</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

Avec le mot cl√© <code class="highlighter-rouge">var</code>, vous pouvez d√©clarer plusieurs variables avec le m√™me nom. La variable aura pour valeur la derni√®re assign√©e.

Vous ne pouvez pas faire cela avec <code class="highlighter-rouge">let</code> ou <code class="highlighter-rouge">const</code> puisqu‚Äôils ont une port√©e de bloc.

</p>
</details>

<hr />

<h6 id="24-quelle-est-la-sortie-">24. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">:</span> <span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span> <span class="p">};</span>
<span class="kd">const</span> <span class="kd">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]);</span>

<span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="kd">set</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">set</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">true</code></li>
  <li>B: <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">true</code></li>
  <li>C: <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">true</code></li>
  <li>D: <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">true</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

Toutes les cl√©s d‚Äôobjet (√† l‚Äôexception des symboles) sont des cha√Ænes de caract√®res sous le capot, m√™me si vous ne les tapez pas vous-m√™me en tant que cha√Æne. C‚Äôest pourquoi <code class="highlighter-rouge">obj.hasOwnProperty("1")</code> renvoie √©galement la valeur <code class="highlighter-rouge">true</code>.

√áa ne marche pas comme √ßa pour un set. Il n‚Äôy a pas de <code class="highlighter-rouge">'1'</code> dans notre ensemble : <code class="highlighter-rouge">set.has('1')</code> renvoie <code class="highlighter-rouge">false</code>. Il a le type num√©rique <code class="highlighter-rouge">1</code>, <code class="highlighter-rouge">set.has(1)</code> renvoie <code class="highlighter-rouge">true</code>.

</p>
</details>

<hr />

<h6 id="25-quelle-est-la-sortie-">25. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">a</span><span class="p">:</span> <span class="dl">"</span><span class="s2">un</span><span class="dl">"</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="dl">"</span><span class="s2">deux</span><span class="dl">"</span><span class="p">,</span> <span class="na">a</span><span class="p">:</span> <span class="dl">"</span><span class="s2">trois</span><span class="dl">"</span> <span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">{ a: "un", b: "deux" }</code></li>
  <li>B: <code class="highlighter-rouge">{ b: "deux", a: "trois" }</code></li>
  <li>C: <code class="highlighter-rouge">{ a: "trois", b: "deux" }</code></li>
  <li>D: <code class="highlighter-rouge">SyntaxError</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

Si vous avez deux cl√©s portant le m√™me nom, la cl√© sera remplac√©e. Elle sera toujours dans sa premi√®re position, mais avec la derni√®re valeur sp√©cifi√©e.

</p>
</details>

<hr />

<h6 id="26-le-contexte-global-dex√©cution-de-javascript-cr√©e-2-choses-pour-vous--lobjet-global-and-le-mot-cl√©-this">26. Le contexte global d‚Äôex√©cution de JavaScript cr√©e 2 choses pour vous : l‚Äôobjet global and le mot-cl√© <code class="highlighter-rouge">this</code>.</h6>

<ul>
  <li>A: Vrai</li>
  <li>B: Faux</li>
  <li>C: √áa d√©pend</li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

Le contexte d'ex√©cution de base est le contexte d'ex√©cution global : c'est ce qui est accessible partout dans votre code.

</p>
</details>

<hr />

<h6 id="27-quelle-est-la-sortie-">27. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">1</code> <code class="highlighter-rouge">2</code></li>
  <li>B: <code class="highlighter-rouge">1</code> <code class="highlighter-rouge">2</code> <code class="highlighter-rouge">3</code></li>
  <li>C: <code class="highlighter-rouge">1</code> <code class="highlighter-rouge">2</code> <code class="highlighter-rouge">4</code></li>
  <li>D: <code class="highlighter-rouge">1</code> <code class="highlighter-rouge">3</code> <code class="highlighter-rouge">4</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

L'instruction `continue` ignore une it√©ration si une condition donn√©e renvoie `true`.

</p>
</details>

<hr />

<h6 id="28-quelle-est-la-sortie-">28. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">giveLydiaPizza</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">Just give Lydia pizza already!</span><span class="dl">"</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">name</span><span class="p">.</span><span class="nx">giveLydiaPizza</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">"Just give Lydia pizza already!"</code></li>
  <li>B: <code class="highlighter-rouge">TypeError: not a function</code></li>
  <li>C: <code class="highlighter-rouge">SyntaxError</code></li>
  <li>D: <code class="highlighter-rouge">undefined</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

`String` est un constructeur int√©gr√©, auquel nous pouvons ajouter des propri√©t√©s. Je viens d'ajouter une m√©thode √† son prototype. Les cha√Ænes de caract√®re primitives sont automatiquement converties en un objet cha√Æne, g√©n√©r√© par la fonction prototype de cha√Æne. Ainsi, toutes les cha√Ænes (objets de cha√Æne) ont acc√®s √† cette m√©thode !

</p>
</details>

<hr />

<h6 id="29-quelle-est-la-sortie-">29. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kd">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span> <span class="p">};</span>

<span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
<span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="mi">456</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">123</code></li>
  <li>B: <code class="highlighter-rouge">456</code></li>
  <li>C: <code class="highlighter-rouge">undefined</code></li>
  <li>D: <code class="highlighter-rouge">ReferenceError</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

Les cl√©s d'objet sont automatiquement converties en cha√Ænes de caract√®res. Nous essayons de d√©finir un objet en tant que cl√© de l'objet `a`, avec la valeur `123`.

Cependant, lorsque nous transformons un objet en cha√Æne de caract√®re, il devient `"[Objet objet]"`. Donc, ce que nous disons ici, c'est que un `a["Objet objet"] = 123`. Ensuite, nous pouvons essayer de refaire la m√™me chose. `c` est un autre objet que nous sommes implicitement en train de transformer en cha√Æne de caract√®re. Donc, `a["Objet objet"] = 456`.

Ensuite, nous affichons `a[b]`, qui est en fait `a["Objet objet"]`. Que nous venons de d√©finir √† `456`, nous renvoyons donc `456`.

</p>
</details>

<hr />

<h6 id="30-quelle-est-la-sortie-">30. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Premier</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">bar</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Second</span><span class="dl">"</span><span class="p">));</span>
<span class="kd">const</span> <span class="nx">baz</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Troisi√®me</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">bar</span><span class="p">();</span>
<span class="nx">foo</span><span class="p">();</span>
<span class="nx">baz</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">Premier</code> <code class="highlighter-rouge">Second</code> <code class="highlighter-rouge">Troisi√®me</code></li>
  <li>B: <code class="highlighter-rouge">Premier</code> <code class="highlighter-rouge">Troisi√®me</code> <code class="highlighter-rouge">Second</code></li>
  <li>C: <code class="highlighter-rouge">Second</code> <code class="highlighter-rouge">Premier</code> <code class="highlighter-rouge">Troisi√®me</code></li>
  <li>D: <code class="highlighter-rouge">Second</code> <code class="highlighter-rouge">Troisi√®me</code> <code class="highlighter-rouge">Premier</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

Nous avons une fonction `setTimeout` et nous l'avons d'abord appel√©e. Pourtant, il a √©t√© affich√© en dernier.

En effet, dans les navigateurs, nous n‚Äôavons pas seulement le moteur d‚Äôex√©cution, nous avons aussi quelque chose appel√© `WebAPI`. `WebAPI` nous donne la fonction` setTimeout` pour commencer, et par exemple le DOM.

Une fois que la fonction de rappel _(callback)_ est pouss√©e via la WebAPI, la fonction `setTimeout` elle-m√™me (mais pas la fonction de rappel !) est extraite de la pile.

<img src="https://i.imgur.com/X5wsHOg.png" width="200" />

Maintenant, `foo` est invoqu√© et `"Premier"` est affich√©.

<img src="https://i.imgur.com/Pvc0dGq.png" width="200" />

`foo` est extrait de la pile et `baz` est invoqu√©. `"Troisi√®me"` est affich√©.

<img src="https://i.imgur.com/WhA2bCP.png" width="200" />

WebAPI ne peut simplement pas ajouter des √©l√©ments √† la pile d√®s qu‚Äôelle est pr√™te. Au lieu de cela, elle pousse la fonction de rappel vers quelque chose appel√© la _file d'attente_.

<img src="https://i.imgur.com/NSnDZmU.png" width="200" />

C'est ici qu'une boucle d'√©v√©nement commence √† fonctionner. La **boucle d'√©v√©nement** examine la pile et la file d'attente des t√¢ches. Si la pile est vide, il prend la premi√®re chose dans la file d'attente et la pousse sur la pile.

<img src="https://i.imgur.com/uyiScAI.png" width="200" />

`bar` est invoqu√©, `"Second"` est affich√© et il est sorti de la pile.

</p>
</details>

<hr />

<h6 id="31-quel-est-l√©l√©ment-cibl√©-eventtarget-au-clic-sur-le-bouton-button-">31. Quel est l‚Äô√©l√©ment cibl√© <em>(event.target)</em> au clic sur le bouton <em>(button)</em> ?</h6>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">onclick=</span><span class="s">"console.log('first div')"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">onclick=</span><span class="s">"console.log('second div')"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"console.log('button')"</span><span class="nt">&gt;</span>
      Click!
    <span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li>A: La <code class="highlighter-rouge">div</code> ext√©rieure</li>
  <li>B: La <code class="highlighter-rouge">div</code> int√©rieure</li>
  <li>C: <code class="highlighter-rouge">button</code></li>
  <li>D: Un tableau de tous les √©l√©ments imbriqu√©s.</li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

L'√©l√©ment imbriqu√© le plus profond qui a provoqu√© l'√©v√©nement est la cible de l'√©v√©nement. Vous pouvez arr√™ter le bouillonnement _(bubbling)_ en utilisant `event.stopPropagation`.

</p>
</details>

<hr />

<h6 id="32-quand-vous-cliquez-sur-le-paragraphe-quelle-est-la-sortie-">32. Quand vous cliquez sur le paragraphe, quelle est la sortie ?</h6>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">onclick=</span><span class="s">"console.log('div')"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;p</span> <span class="na">onclick=</span><span class="s">"console.log('p')"</span><span class="nt">&gt;</span>
    Click here!
  <span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">p</code> <code class="highlighter-rouge">div</code></li>
  <li>B: <code class="highlighter-rouge">div</code> <code class="highlighter-rouge">p</code></li>
  <li>C: <code class="highlighter-rouge">p</code></li>
  <li>D: <code class="highlighter-rouge">div</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

Si nous cliquons sur `p`, nous verrons deux lignes : `p` et `div`. Lors de la propagation d'un √©v√©nement, il y a 3 phases: capture, cible et bouillonnement _(bubbling)_. Par d√©faut, les gestionnaires d'√©v√©nements sont ex√©cut√©s dans la phase de bouillonnement (sauf si vous d√©finissez `useCapture` sur` true`). Il va de l'√©l√©ment imbriqu√© le plus profond vers l'ext√©rieur.

</p>
</details>

<hr />

<h6 id="33-quelle-est-la-sortie-">33. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span> <span class="p">};</span>

<span class="kd">function</span> <span class="nx">sayHi</span><span class="p">(</span><span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2"> is </span><span class="p">${</span><span class="nx">age</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="mi">21</span><span class="p">);</span>
<span class="nx">sayHi</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="mi">21</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">undefined is 21</code> <code class="highlighter-rouge">Lydia is 21</code></li>
  <li>B: <code class="highlighter-rouge">function</code> <code class="highlighter-rouge">function</code></li>
  <li>C: <code class="highlighter-rouge">Lydia is 21</code> <code class="highlighter-rouge">Lydia is 21</code></li>
  <li>D: <code class="highlighter-rouge">Lydia is 21</code> <code class="highlighter-rouge">function</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : D

Avec les deux, nous pouvons transmettre l'objet auquel nous voulons que le mot cl√© `this` fasse r√©f√©rence. Cependant, `.call` est aussi _ex√©cut√© imm√©diatement_ !

`.bind.` renvoie une copie de la fonction, mais avec un contexte li√© ! Elle n'est pas ex√©cut√©e imm√©diatement.

</p>
</details>

<hr />

<h6 id="34-quelle-est-la-sortie-">34. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(()</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">)();</span>
<span class="p">}</span>

<span class="k">typeof</span> <span class="nx">sayHi</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">"object"</code></li>
  <li>B: <code class="highlighter-rouge">"number"</code></li>
  <li>C: <code class="highlighter-rouge">"function"</code></li>
  <li>D: <code class="highlighter-rouge">"undefined"</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

La fonction `sayHi` renvoie la valeur renvoy√©e par la fonction imm√©diatement appel√©e (IIFE). Cette fonction a renvoy√© `0`, qui est du type `"nombre"`.

Pour info : il n'y a que 7 types natifs : `null`, `undefined`, `boolean`, `number`, `string`, `object` et `symbol`. `"function"` n'est pas un type, puisque les fonctions sont des objets, il est de type `"object"`.

</p>
</details>

<hr />

<h6 id="35-lesquelles-de-ces-valeurs-sont-fausses-">35. Lesquelles de ces valeurs sont fausses ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">0</span><span class="p">;</span>
<span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">(</span><span class="dl">""</span><span class="p">);</span>
<span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">);</span>
<span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
<span class="kc">undefined</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">0</code>, <code class="highlighter-rouge">''</code>, <code class="highlighter-rouge">undefined</code></li>
  <li>B: <code class="highlighter-rouge">0</code>, <code class="highlighter-rouge">new Number(0)</code>, <code class="highlighter-rouge">''</code>, <code class="highlighter-rouge">new Boolean(false)</code>, <code class="highlighter-rouge">undefined</code></li>
  <li>C: <code class="highlighter-rouge">0</code>, <code class="highlighter-rouge">''</code>, <code class="highlighter-rouge">new Boolean(false)</code>, <code class="highlighter-rouge">undefined</code></li>
  <li>D: All of them are falsy</li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

Il n'y a que six valeurs de fausses :

- `undefined`
- `null`
- `NaN`
- `0`
- `''` (cha√Æne de caract√®re vide)
- `false`

Les constructeurs de fonctions, comme `new Number` et `new Boolean` sont la vraies.

</p>
</details>

<hr />

<h6 id="36-quelle-est-la-sortie-">36. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="k">typeof</span> <span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">"number"</code></li>
  <li>B: <code class="highlighter-rouge">"string"</code></li>
  <li>C: <code class="highlighter-rouge">"object"</code></li>
  <li>D: <code class="highlighter-rouge">"undefined"</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

`typeof 1` retourne `"number"`.
`typeof "number"` retourne `"string"`

</p>
</details>

<hr />

<h6 id="37-quelle-est-la-sortie-">37. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="nx">numbers</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">[1, 2, 3, 7 x null, 11]</code></li>
  <li>B: <code class="highlighter-rouge">[1, 2, 3, 11]</code></li>
  <li>C: <code class="highlighter-rouge">[1, 2, 3, 7 x empty, 11]</code></li>
  <li>D: <code class="highlighter-rouge">SyntaxError</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

Lorsque vous d√©finissez une valeur sur un √©l√©ment d'un tableau qui d√©passe la longueur du tableau, JavaScript cr√©e un quelque chose appel√© "emplacements vides". Ceux-ci ont en fait la valeur `undefined`, mais vous verrez quelque chose comme :

`[1, 2, 3, 7 x empty, 11]`

en fonction de l'endroit o√π vous l'ex√©cutez (diff√©rent pour chaque navigateur, n≈ìud, etc.).

</p>
</details>

<hr />

<h6 id="38-quelle-est-la-sortie-">38. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">;</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>
<span class="p">})();</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">1</code> <code class="highlighter-rouge">undefined</code> <code class="highlighter-rouge">2</code></li>
  <li>B: <code class="highlighter-rouge">undefined</code> <code class="highlighter-rouge">undefined</code> <code class="highlighter-rouge">undefined</code></li>
  <li>C: <code class="highlighter-rouge">1</code> <code class="highlighter-rouge">1</code> <code class="highlighter-rouge">2</code></li>
  <li>D: <code class="highlighter-rouge">1</code> <code class="highlighter-rouge">undefined</code> <code class="highlighter-rouge">undefined</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

Le bloc `catch` re√ßoit l'argument `x`. Ce n'est pas le m√™me `x` que la variable que nous passons en arguments. Cette variable `x` a une port√©e de bloc.

Plus tard, nous d√©finissons cette variable de bloc √©gale √† `1` et d√©finissons la valeur de la variable `y`. Maintenant, nous affichons la variable `x` de port√©e de bloc, dont la valeur est √©gale √† `1`.

En dehors du bloc `catch`, `x` est toujours `undefined` et `y` est √©gal √† `2`. Lorsque nous voulons `console.log(x)` en dehors du bloc `catch`, il renvoie `undefined`, et `y` renvoie `2`.

</p>
</details>

<hr />

<h6 id="39-tout-en-javascript-est">39. Tout en JavaScript est‚Ä¶</h6>

<ul>
  <li>A: primitif ou objet</li>
  <li>B: fonction ou objet</li>
  <li>C: question d√©licate ! Seulement des objets</li>
  <li>D: nombre ou objet</li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

JavaScript n'a que des types et des objets primitifs.

Les types primitifs sont `boolean`, `null`, `undefined`, `bigint`, `number`, `string` et `symbol`.

Ce qui diff√©rencie une primitive d'un objet, c'est que les primitives n'ont aucune propri√©t√© ou m√©thode. Cependant, vous remarquerez que  `'foo'.toUpperCase()` est √©valu√© √† `'FOO'` et n'entra√Æne pas de `TypeError`. En effet, lorsque vous essayez d'acc√©der √† une propri√©t√© ou √† une m√©thode sur une primitive telle qu'une cha√Æne, JavaScript encapsule implicitement l'objet √† l'aide de l'une des classes d'encapsulation, √† savoir `String`, puis supprime imm√©diatement l'encapsulation apr√®s l'√©valuation de l'expression. Toutes les primitives √† l'exception de `null` et` undefined` pr√©sentent ce comportement.

</p>
</details>

<hr />

<h6 id="40-quelle-est-la-sortie-">40. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]].</span><span class="nx">reduce</span><span class="p">(</span>
  <span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">acc</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">cur</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">[0, 1, 2, 3, 1, 2]</code></li>
  <li>B: <code class="highlighter-rouge">[6, 1, 2]</code></li>
  <li>C: <code class="highlighter-rouge">[1, 2, 0, 1, 2, 3]</code></li>
  <li>D: <code class="highlighter-rouge">[1, 2, 6]</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

`[1, 2]` est notre valeur initiale. C'est la valeur avec laquelle nous commen√ßons et la valeur du tout premier `acc`. Au premier tour, `acc` est `[1,2]` et `cur` est `[0, 1]`. Nous les concat√©nons, ce qui donne `[1, 2, 0, 1]`.

Ensuite, `acc` est `[1, 2, 0, 1]` et `cur` est `[2, 3]`. Nous les concat√©nons et obtenons `[1, 2, 0, 1, 2, 3]`

</p>
</details>

<hr />

<h6 id="41-quelle-est-la-sortie-">41. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">!!</span><span class="kc">null</span><span class="p">;</span>
<span class="o">!!</span><span class="dl">""</span><span class="p">;</span>
<span class="o">!!</span><span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">false</code></li>
  <li>B: <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">true</code></li>
  <li>C: <code class="highlighter-rouge">false</code> <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">true</code></li>
  <li>D: <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">false</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

`null` est faux. `!null` retourne `true`. `!true` retourne `false`.

`""` est faux. `!""` retourne `true`. `!true` retourne `false`.

`1` est vrai. `!1` retourne `false`. `!false` retourne `true`.

</p>
</details>

<hr />

<h6 id="42-que-retourne-la-m√©thode-setinterval-">42. Que retourne la m√©thode <code class="highlighter-rouge">setInterval</code> ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hi</span><span class="dl">"</span><span class="p">),</span> <span class="mi">1000</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: un identifiant unique</li>
  <li>B: le temps de millisecondes sp√©cifi√©</li>
  <li>C: la fonction pass√©e en param√®tre</li>
  <li>D: <code class="highlighter-rouge">undefined</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

Il retourne un identifiant unique. Cet identifiant peut √™tre utilis√© pour effacer cet interval avec la fonction `clearInterval()`.

</p>
</details>

<hr />

<h6 id="43-que-retourne-ceci-">43. Que retourne ceci ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[...</span><span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span><span class="p">];</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">["L", "y", "d", "i", "a"]</code></li>
  <li>B: <code class="highlighter-rouge">["Lydia"]</code></li>
  <li>C: <code class="highlighter-rouge">[[], "Lydia"]</code></li>
  <li>D: <code class="highlighter-rouge">[["L", "y", "d", "i", "a"]]</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

Une cha√Æne de caract√®re est it√©rable. L'op√©rateur de d√©construction transforme chaque caract√®re d'un it√©rable en un √©l√©ment.

</p>
</details>

<hr />

<h6 id="44-quelle-est-la-sortie-">44. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="o">*</span> <span class="nx">generator</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="nx">i</span><span class="p">;</span>
  <span class="k">yield</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nx">generator</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">[0, 10], [10, 20]</code></li>
  <li>B: <code class="highlighter-rouge">20, 20</code></li>
  <li>C: <code class="highlighter-rouge">10, 20</code></li>
  <li>D: <code class="highlighter-rouge">0, 10 and 10, 20</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

Les fonctions r√©guli√®res ne peuvent pas √™tre arr√™t√©es √† mi-parcours apr√®s l'invocation. Cependant, une fonction de g√©n√©rateur peut √™tre "arr√™t√©e" √† mi-chemin et continuer plus tard √† partir de son point d'arr√™t. Chaque fois qu'une fonction g√©n√©ratrice rencontre un mot-cl√© `yield`, elle renvoie la valeur sp√©cifi√©e apr√®s celui-ci. Notez que la fonction du g√©n√©rateur dans ce cas ne _return_ pas la valeur, il _yields_ la valeur.

Premi√®rement, nous initialisons la fonction du g√©n√©rateur avec `i` √©gal √†` 10`. Nous appelons la fonction g√©n√©ratrice en utilisant la m√©thode `next()`. La premi√®re fois que nous appelons la fonction de g√©n√©rateur, `i` est √©gal √† `10`. Il rencontre le premier mot-cl√© `yield` : il donne la valeur de `i`. Le g√©n√©rateur est maintenant "en pause" et `10` est affich√©.

Ensuite, nous appelons √† nouveau la fonction avec la m√©thode `next()`. Il commence √† continuer l√† o√π il s‚Äô√©tait arr√™t√© pr√©c√©demment, toujours avec `i` √©gal √† `10`. Maintenant, il rencontre le prochain mot-cl√© `yield` et donne `i * 2`. `i` est √©gal √† `10`, donc il renvoie `10 * 2`, ce qui correspond √† `20`. Cela donne `10, 20`.

</p>
</details>

<hr />

<h6 id="45-quest-ce-que-cela-retourne-">45. Qu‚Äôest-ce que cela retourne ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">firstPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="dl">"</span><span class="s2">one</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">secondPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="dl">"</span><span class="s2">two</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="nb">Promise</span><span class="p">.</span><span class="nx">race</span><span class="p">([</span><span class="nx">firstPromise</span><span class="p">,</span> <span class="nx">secondPromise</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">));</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">"one"</code></li>
  <li>B: <code class="highlighter-rouge">"two"</code></li>
  <li>C: <code class="highlighter-rouge">"two" "one"</code></li>
  <li>D: <code class="highlighter-rouge">"one" "two"</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

Lorsque nous passons plusieurs promesses √† la m√©thode `Promise.race`, elle r√©sout/rejette la promesse _first_ qui r√©sout/rejette. Nous passons, √† la m√©thode `setTimeout`, un timer: 500 ms pour la premi√®re promesse (`firstPromise`), et 100 ms pour la deuxi√®me promesse (`secondPromise`). Cela signifie que le `secondPromise` se r√©sout en premier avec la valeur de `'two'`. `res` contient maintenant la valeur de `'deux'`, qui est affich√©.

</p>
</details>

<hr />

<h6 id="46-quelle-est-la-sortie-">46. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">members</span> <span class="o">=</span> <span class="p">[</span><span class="nx">person</span><span class="p">];</span>
<span class="nx">person</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">members</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">null</code></li>
  <li>B: <code class="highlighter-rouge">[null]</code></li>
  <li>C: <code class="highlighter-rouge">[{}]</code></li>
  <li>D: <code class="highlighter-rouge">[{ name: "Lydia" }]</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : D

Tout d'abord, nous d√©clarons une variable `person` avec la valeur d'un objet poss√©dant une propri√©t√© `name`.

<img src="https://i.imgur.com/TML1MbS.png" width="200" />

Ensuite, nous d√©clarons une variable appel√©e `membres`. Nous d√©finissons le premier √©l√©ment de ce tableau √©gal √† la valeur de la variable `person`. Les objets interagissent par r√©f√©rence quand ils sont √©gaux. Lorsque vous affectez une r√©f√©rence d'une variable √† une autre, vous cr√©ez une copie de cette r√©f√©rence. (notez qu'ils n'ont pas la m√™me r√©f√©rence !)

<img src="https://i.imgur.com/FSG5K3F.png" width="300" />

Ensuite, nous d√©finissons la variable `person` √©gale √† `null`.

<img src="https://i.imgur.com/sYjcsMT.png" width="300" />

Nous modifions seulement la valeur de la variable `person`, et non le premier √©l√©ment du tableau, car cet √©l√©ment a une r√©f√©rence (copi√©e) diff√©rente de l'objet. Le premier √©l√©ment de `members` conserve sa r√©f√©rence √† l'objet d'origine. Lorsque nous affichons le tableau `members`, le premier √©l√©ment contient toujours la valeur de l'objet, qui est affich√©.

</p>
</details>

<hr />

<h6 id="47-quelle-est-la-sortie-">47. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">21</span>
<span class="p">};</span>

<span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">item</span> <span class="k">in</span> <span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">{ name: "Lydia" }, { age: 21 }</code></li>
  <li>B: <code class="highlighter-rouge">"name", "age"</code></li>
  <li>C: <code class="highlighter-rouge">"Lydia", 21</code></li>
  <li>D: <code class="highlighter-rouge">["name", "Lydia"], ["age", 21]</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

Avec une boucle `for-in`, nous pouvons parcourir les cl√©s d'objet, dans ce cas `name` et `age`. Sous le capot, les cl√©s d'objet sont des cha√Ænes (si elles ne sont pas un symbole). A chaque boucle, nous d√©finissons la valeur de `item` √©gal √† la cl√© courante sur laquelle elle est entrain d'it√©r√©. Premi√®rement, `item` est √©gal √† `name` et est affich√©. Ensuite, `item` est √©gal √† `age`, qui est affich√©.

</p>
</details>

<hr />

<h6 id="48-quelle-est-la-sortie-">48. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">5</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">"345"</code></li>
  <li>B: <code class="highlighter-rouge">"75"</code></li>
  <li>C: <code class="highlighter-rouge">12</code></li>
  <li>D: <code class="highlighter-rouge">"12"</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

L'associativit√© des op√©rateurs correspond √† l'ordre dans lequel le compilateur √©value les expressions, de gauche √† droite ou de droite √† gauche. Cela se produit uniquement si tous les op√©rateurs ont la m√™me priorit√©. Nous n'avons qu'un type d'op√©rateur : `+`. De plus, l'associativit√© est de gauche √† droite.

`3 + 4` est √©valu√© en premier. Cela donne le nombre `7`.

`7 + '5'` donne `'75'` √† cause de la conversion. JavaScript convertit le nombre `7` en une cha√Æne, voir question 15. Nous pouvons concat√©ner deux cha√Ænes en utilisant l'op√©rateur `+`. `"7" + "5"` a pour r√©sultat `"75"`.

</p>
</details>

<hr />

<h6 id="49-quelle-est-la-valeur-de-num-">49. Quelle est la valeur de <code class="highlighter-rouge">num</code> ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">num</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="dl">"</span><span class="s2">7*6</span><span class="dl">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">42</code></li>
  <li>B: <code class="highlighter-rouge">"42"</code></li>
  <li>C: <code class="highlighter-rouge">7</code></li>
  <li>D: <code class="highlighter-rouge">NaN</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

Seuls les premiers nombres de la cha√Æne sont renvoy√©s. Bas√© sur la base dix (le deuxi√®me argument permettant de sp√©cifier le type de nombre que nous voulons analyser: base 10, hexad√©cimal, octal, binaire, etc.), `parseInt` v√©rifie si les caract√®res de la cha√Æne sont valides. Une fois qu'il rencontre un caract√®re qui n'est pas un nombre valide dans la base, il arr√™te l'analyse et ignore les caract√®res suivants.

`*` n'est pas un nombre valide. Il analyse seulement `7` dans la d√©cimale `7`. `num` contient maintenant la valeur de` 7`.

</p>
</details>

<hr />

<h6 id="50-quelle-est-la-sortie-">50. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nx">num</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">num</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">number</span><span class="dl">"</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">num</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">[]</code></li>
  <li>B: <code class="highlighter-rouge">[null, null, null]</code></li>
  <li>C: <code class="highlighter-rouge">[undefined, undefined, undefined]</code></li>
  <li>D: <code class="highlighter-rouge">[ 3 x empty ]</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

Lors du l'utilisation de `map` sur le tableau, la valeur de `num` est √©gale √† l‚Äô√©l√©ment sur lequel elle est en train de boucler. Dans ce cas, les √©l√©ments sont des nombres. La condition de l'instruction si `typeof num === "num√©ro"` renvoie `true`. La fonction map cr√©e un nouveau tableau et ins√®re les valeurs renvoy√©es par la fonction.

Cependant, nous ne renvoyons pas de valeur. Lorsque nous ne renvoyons pas de valeur √† partir de la fonction, la fonction renvoie `undefined`. Le bloc de fonction est appel√© pour chaque √©l√©ment du tableau. Ainsi, pour chaque √©l√©ment, nous renvoyons `undefined`.

</p>
</details>

<hr />

<h6 id="51-quelle-est-la-sortie-">51. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getInfo</span><span class="p">(</span><span class="nx">member</span><span class="p">,</span> <span class="nx">year</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">member</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">year</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">1998</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Sarah</span><span class="dl">"</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">birthYear</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">1997</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">getInfo</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="nx">birthYear</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="nx">birthYear</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">{ name: "Lydia" }, "1997"</code></li>
  <li>B: <code class="highlighter-rouge">{ name: "Sarah" }, "1998"</code></li>
  <li>C: <code class="highlighter-rouge">{ name: "Lydia" }, "1998"</code></li>
  <li>D: <code class="highlighter-rouge">{ name: "Sarah" }, "1997"</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

Les arguments sont pass√©s par _valeur_, √† moins que leur valeur ne soit un objet, ils sont pass√©s par _r√©f√©rence_. `birthYear` est pass√©e par valeur, car c'est une cha√Æne, pas un objet. Lorsque nous passons des arguments par valeur, une copie de cette valeur est cr√©√©e (voir question 46).

La variable `birthYear` a une r√©f√©rence √† la valeur `"1997"`. L'argument `year` fait √©galement r√©f√©rence √† la valeur `"1997"`, mais il ne s'agit pas de la m√™me valeur que celle de `birthYear`. Lorsque nous mettons √† jour la valeur de `year` en pla√ßant `year` √©gal √† `"1998"`, nous ne mettons √† jour que la valeur de `year`. `birthYear` est toujours √©gal √† `"1997"`.

La valeur de `person` est un objet. L'argument `membre` a une r√©f√©rence (copi√©e) au m√™me objet. Lorsque nous modifions une propri√©t√© de l'objet, `membre` a une r√©f√©rence √† la valeur de` person` sera √©galement modifi√©e, puisqu'elles ont toutes les deux une r√©f√©rence au m√™me objet. La propri√©t√© `name` de `person` est maintenant √©gale √† la valeur `"Lydia"`.

</p>
</details>

<hr />

<h6 id="52-quelle-est-la-sortie-">52. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">greeting</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="dl">"</span><span class="s2">Hello world!</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">greeting</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">It worked!</span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Oh no an error!</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">sayHi</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">"It worked! Hello world!"</code></li>
  <li>B: <code class="highlighter-rouge">"Oh no an error: undefined</code></li>
  <li>C: <code class="highlighter-rouge">SyntaxError: can only throw Error objects</code></li>
  <li>D: <code class="highlighter-rouge">"Oh no an error: Hello world!</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : D

Avec l'instruction `throw`, nous pouvons cr√©er des erreurs personnalis√©es. Avec cette d√©claration, vous pouvez lancer des exceptions. Une exception peut √™tre une <b>cha√Æne</b>, un <b>num√©ro</b>, un <b>bool√©en</b> ou un <b>objet</b>. Dans ce cas, notre exception est la cha√Æne `'Hello world'`.

Avec l'instruction `catch`, nous pouvons sp√©cifier quoi faire si une exception est lev√©e dans le bloc `try`. Une exception est lev√©e : la cha√Æne `'Hello world'`. `e` est maintenant √©gal √† cette cha√Æne, que nous affichons. Il en r√©sulte `'Oh an error: Hello world'`.

</p>
</details>

<hr />

<h6 id="53-quelle-est-la-sortie-">53. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Car</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">make</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Lamborghini</span><span class="dl">"</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">make</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Maserati</span><span class="dl">"</span> <span class="p">};</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">myCar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myCar</span><span class="p">.</span><span class="nx">make</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">"Lamborghini"</code></li>
  <li>B: <code class="highlighter-rouge">"Maserati"</code></li>
  <li>C: <code class="highlighter-rouge">ReferenceError</code></li>
  <li>D: <code class="highlighter-rouge">TypeError</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

Lorsque vous retournez une propri√©t√©, la valeur de la propri√©t√© est √©gale √† la valeur _retourn√©e_ et non √† la valeur d√©finie dans la fonction constructeur. Nous renvoyons la cha√Æne `"Maserati"`, donc `myCar.make` est √©gal √† `"Maserati"`.

</p>
</details>

<hr />

<h6 id="54-quelle-est-la-sortie-">54. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">10</span><span class="p">);</span>
<span class="p">})();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">y</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">"undefined", "number"</code></li>
  <li>B: <code class="highlighter-rouge">"number", "number"</code></li>
  <li>C: <code class="highlighter-rouge">"object", "number"</code></li>
  <li>D: <code class="highlighter-rouge">"number", "undefined"</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

`let x = y = 10;` est en r√©alit√© un raccourci pour :

```javascript
y = 10;
let x = y;
```

Lorsque nous d√©finissons `y` √©gal √† `10`, nous ajoutons en fait une propri√©t√© `y` √† l'objet global (`window` dans le navigateur,` global` dans NodeJS). Dans un navigateur, `window.y` est √©gal √† `10`.

Ensuite, nous d√©clarons une variable `x` avec la valeur de `y`, qui est `10`. Les variables d√©clar√©es avec le mot-cl√© `let` ont une port√©e de bloc, elles ne sont d√©finies que dans le bloc dans lequel elles sont d√©clar√©es; la fonction imm√©diatement invoqu√©e (IIFE) dans ce cas. Lorsque nous utilisons l'op√©rateur `typeof`, l'op√©rande `x` n'est pas d√©fini: nous essayons d'acc√©der √† `x` en dehors du bloc dans lequel il est d√©clar√©. Cela signifie que `x` n'est pas d√©fini. Les valeurs auxquelles aucune valeur n'a √©t√© attribu√©e ni d√©clar√©e sont du type `"undefined"`. `console.log (typeof x)` renvoie `"undefined"`.

Cependant, nous avons cr√©√© une variable globale `y` lorsque `y` est √©gal √† `10`. Cette valeur est accessible n'importe o√π dans notre code. `y` est d√©fini et contient une valeur de type `"number"`. `console.log (typeof y)` renvoie `"number"`.

</p>
</details>

<hr />

<h6 id="55-quelle-est-la-sortie-">55. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Dog</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bark</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Woof I am </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">pet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">(</span><span class="dl">"</span><span class="s2">Mara</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">pet</span><span class="p">.</span><span class="nx">bark</span><span class="p">();</span>

<span class="k">delete</span> <span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bark</span><span class="p">;</span>

<span class="nx">pet</span><span class="p">.</span><span class="nx">bark</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">"Woof I am Mara"</code>, <code class="highlighter-rouge">TypeError</code></li>
  <li>B: <code class="highlighter-rouge">"Woof I am Mara"</code>,<code class="highlighter-rouge">"Woof I am Mara"</code></li>
  <li>C: <code class="highlighter-rouge">"Woof I am Mara"</code>, <code class="highlighter-rouge">undefined</code></li>
  <li>D: <code class="highlighter-rouge">TypeError</code>, <code class="highlighter-rouge">TypeError</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

Nous pouvons supprimer des propri√©t√©s d'objets en utilisant le mot-cl√© `delete`, √©galement dans le prototype. En supprimant une propri√©t√© dans le prototype, elle n‚Äôest plus disponible dans la cha√Æne de prototypes. Dans ce cas, la fonction `bark` n'est plus disponible dans le prototype apr√®s `delete Dog.prototype.bark`, mais nous essayons toujours d'y acc√©der.

Lorsque nous essayons d'appeler quelque chose qui n'est pas une fonction, un `TypeError` est lev√©. Dans ce cas, `TypeError: pet.bark n'est pas une fonction`, puisque` pet.bark` est `undefined`.

</p>
</details>

<hr />

<h6 id="56-quelle-est-la-sortie-">56. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="kd">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kd">set</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">[1, 1, 2, 3, 4]</code></li>
  <li>B: <code class="highlighter-rouge">[1, 2, 3, 4]</code></li>
  <li>C: <code class="highlighter-rouge">{1, 1, 2, 3, 4}</code></li>
  <li>D: <code class="highlighter-rouge">{1, 2, 3, 4}</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : D

L'objet `Set` est une collection de valeurs _uniques_ : une valeur ne peut appara√Ætre qu'une seule fois dans un ensemble.

Nous avons pass√© l'it√©rable `[1, 1, 2, 3, 4]` avec une valeur dupliqu√©e `1`. Puisque nous ne pouvons pas avoir deux valeurs identiques dans un ensemble, l'une d'entre elles est supprim√©e. Cela donne `{1, 2, 3, 4}`.

</p>
</details>

<hr />

<h6 id="57-quelle-est-la-sortie-">57. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// counter.js</span>
<span class="kd">let</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">counter</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// index.js</span>
<span class="k">import</span> <span class="nx">myCounter</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./counter</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">myCounter</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myCounter</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">10</code></li>
  <li>B: <code class="highlighter-rouge">11</code></li>
  <li>C: <code class="highlighter-rouge">Error</code></li>
  <li>D: <code class="highlighter-rouge">NaN</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

Un module import√© est _en lecture seule_ : vous ne pouvez pas modifier le module import√©. Seul le module qui les exporte peut en changer la valeur.

Lorsque nous essayons d'incr√©menter la valeur de `myCounter`, une erreur est g√©n√©r√©e : `myCounter` est en lecture seule et ne peut pas √™tre modifi√©.

</p>
</details>

<hr />

<h6 id="58-quelle-est-la-sortie-">58. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">age</span> <span class="o">=</span> <span class="mi">21</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">delete</span> <span class="nx">name</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">delete</span> <span class="nx">age</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">false</code>, <code class="highlighter-rouge">true</code></li>
  <li>B: <code class="highlighter-rouge">"Lydia"</code>, <code class="highlighter-rouge">21</code></li>
  <li>C: <code class="highlighter-rouge">true</code>, <code class="highlighter-rouge">true</code></li>
  <li>D: <code class="highlighter-rouge">undefined</code>, <code class="highlighter-rouge">undefined</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

L'op√©rateur `delete` renvoie une valeur bool√©enne : `true` en cas de suppression r√©ussie, sinon il renvoie `false`. Toutefois, les variables d√©clar√©es avec les mots cl√©s `var`,` const` ou `let` ne peuvent pas √™tre supprim√©es √† l'aide de l'op√©rateur` delete`.

La variable `name` a √©t√© d√©clar√©e avec un mot-cl√© `const`. Par cons√©quent, sa suppression a √©chou√© : `false` est renvoy√©. Lorsque nous d√©finissons `age` √©gal √† `21`, nous avons en fait ajout√© une propri√©t√© appel√©e `age` √† l'objet global. De cette fa√ßon, vous pouvez supprimer des propri√©t√©s d‚Äôobjets, ainsi que de l‚Äôobjet global, pour que `delete age` renvoie` true`.

</p>
</details>

<hr />

<h6 id="59-quelle-est-la-sortie-">59. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">y</span><span class="p">]</span> <span class="o">=</span> <span class="nx">numberes</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">[[1, 2, 3, 4, 5]]</code></li>
  <li>B: <code class="highlighter-rouge">[1, 2, 3, 4, 5]</code></li>
  <li>C: <code class="highlighter-rouge">1</code></li>
  <li>D: <code class="highlighter-rouge">[1]</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : C

Nous pouvons d√©compresser les valeurs des tableaux ou les propri√©t√©s des objets en les d√©truisant. Par exemple :

```javascript
[a, b] = [1, 2];
```

<img src="https://i.imgur.com/ADFpVop.png" width="200" />

La valeur de `a` est maintenant `1` et la valeur de `b` est maintenant `2`. Ce que nous avons r√©ellement fait dans la question, c'est :

```javascript
[y] = [1, 2, 3, 4, 5];
```

<img src="https://i.imgur.com/NzGkMNk.png" width="200" />

Cela signifie que la valeur de `y` est √©gale √† la premi√®re valeur du tableau, qui correspond au nombre `1`. Lorsque nous affichons `y`,` 1` est renvoy√©.

</p>
</details>

<hr />

<h6 id="60-quelle-est-la-sortie-">60. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">21</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">admin</span> <span class="o">=</span> <span class="p">{</span> <span class="na">admin</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="p">...</span><span class="nx">user</span> <span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">admin</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">{ admin: true, user: { name: "Lydia", age: 21 } }</code></li>
  <li>B: <code class="highlighter-rouge">{ admin: true, name: "Lydia", age: 21 }</code></li>
  <li>C: <code class="highlighter-rouge">{ admin: true, user: ["Lydia", 21] }</code></li>
  <li>D: <code class="highlighter-rouge">{ admin: true }</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

Il est possible de combiner des objets en utilisant l'op√©rateur de d√©construction `...`. Il vous permet de cr√©er des copies des paires cl√© / valeur d'un objet et de les ajouter √† un autre objet. Dans ce cas, nous cr√©ons des copies de l'objet `user` et nous les ajoutons √† l'objet` admin`. L'objet `admin` contient maintenant les paires cl√© / valeur copi√©es, ce qui donne `{admin: true, nom: "Lydia", age: 21}`.

</p>
</details>

<hr />

<h6 id="61-quelle-est-la-sortie-">61. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lydia</span><span class="dl">"</span> <span class="p">};</span>

<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">"</span><span class="s2">age</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="mi">21</span> <span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">{ name: "Lydia", age: 21 }</code>, <code class="highlighter-rouge">["name", "age"]</code></li>
  <li>B: <code class="highlighter-rouge">{ name: "Lydia", age: 21 }</code>, <code class="highlighter-rouge">["name"]</code></li>
  <li>C: <code class="highlighter-rouge">{ name: "Lydia"}</code>, <code class="highlighter-rouge">["name", "age"]</code></li>
  <li>D: <code class="highlighter-rouge">{ name: "Lydia"}</code>, <code class="highlighter-rouge">["age"]</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : B

Avec la m√©thode `defineProperty`, nous pouvons ajouter de nouvelles propri√©t√©s √† un objet ou modifier celles existantes. Lorsque nous ajoutons une propri√©t√© √† un objet en utilisant la m√©thode `defineProperty`, il s‚Äôagit par d√©faut d'une propri√©t√© _non √©num√©rable_. La m√©thode `Object.keys` renvoie tous les noms de propri√©t√©s _√©num√©rable_ √† partir d'un objet, dans ce cas uniquement `"name"`.

Les propri√©t√©s ajout√©es √† l'aide de la m√©thode `defineProperty` sont immuables par d√©faut. Vous pouvez remplacer ce comportement en utilisant les propri√©t√©s `writeable`, `configurable` et `enumerable`. De cette fa√ßon, la m√©thode `defineProperty` vous donne beaucoup plus de contr√¥le sur les propri√©t√©s que vous ajoutez √† un objet.

</p>
</details>

<hr />

<h6 id="62-quelle-est-la-sortie-">62. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">settings</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">lydiahallie</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">level</span><span class="p">:</span> <span class="mi">19</span><span class="p">,</span>
  <span class="na">health</span><span class="p">:</span> <span class="mi">90</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">settings</span><span class="p">,</span> <span class="p">[</span><span class="dl">"</span><span class="s2">level</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">health</span><span class="dl">"</span><span class="p">]);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">"{"level":19, "health":90}"</code></li>
  <li>B: <code class="highlighter-rouge">"{"username": "lydiahallie"}"</code></li>
  <li>C: <code class="highlighter-rouge">"["level", "health"]"</code></li>
  <li>D: <code class="highlighter-rouge">"{"username": "lydiahallie", "level":19, "health":90}"</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

Le second argument de `JSON.stringify` est le _repla√ßant_. Le rempla√ßant peut √™tre une fonction ou un tableau, et vous permet de contr√¥ler quoi et comment les valeurs doivent √™tre stringifi√©es.

Si le rempla√ßant est un _tableau_, seules les propri√©t√©s dont les noms sont inclus dans le tableau seront ajout√©es √† la cha√Æne JSON. Dans ce cas, seules les propri√©t√©s avec les noms `"level"` et `"health"` sont incluses, `"username"` est exclu. `data` est maintenant √©gal √† `"{"level":19, "health":90}"`.

Si le rempla√ßant est une _fonction_, cette fonction est appel√©e sur chaque propri√©t√© de l'objet que vous personnalisez. La valeur renvoy√©e par cette fonction sera la valeur de la propri√©t√© lorsqu'elle sera ajout√©e √† la cha√Æne JSON. Si la valeur est `undefined`, cette propri√©t√© est exclue de la cha√Æne JSON.

</p>
</details>

<hr />

<h6 id="63-quelle-est-la-sortie-">63. Quelle est la sortie ?</h6>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">increaseNumber</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">num</span><span class="o">++</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">increasePassedNumber</span> <span class="o">=</span> <span class="nx">number</span> <span class="o">=&gt;</span> <span class="nx">number</span><span class="o">++</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">num1</span> <span class="o">=</span> <span class="nx">increaseNumber</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">num2</span> <span class="o">=</span> <span class="nx">increasePassedNumber</span><span class="p">(</span><span class="nx">num1</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num2</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>A: <code class="highlighter-rouge">10</code>, <code class="highlighter-rouge">10</code></li>
  <li>B: <code class="highlighter-rouge">10</code>, <code class="highlighter-rouge">11</code></li>
  <li>C: <code class="highlighter-rouge">11</code>, <code class="highlighter-rouge">11</code></li>
  <li>D: <code class="highlighter-rouge">11</code>, <code class="highlighter-rouge">12</code></li>
</ul>

<details><summary><b>R√©ponse</b></summary>
<p>

#### R√©ponse : A

L'op√©rateur arithm√©tique `++` _renvoie en premier_ la valeur de l'op√©rande, _puis incr√©mente_ la valeur de l'op√©rande. La valeur de `num1` est √©gale √† `10`, puisque la fonction `increaseNumber` renvoie d'abord la valeur de `num`, qui correspond √† `10`, et augmente la valeur de `num` par la suite.

`num2` est √©gal √† `10`, puisque nous avons pass√© `num1` √† la commande `increasePassedNumber`. `number` est √©gal √† `10` (la valeur de `num1`). Encore une fois, l'op√©rateur arithm√©tique `++` _renvoie d'abord_ la valeur de l'op√©rande, puis incr√©mente_ la valeur de l'op√©rande. La valeur de `nombre` est `10`, donc `num2` est √©gal √† `10`.

</p>
</details>
<style>
mark {
background-color: #252525;
color: yellow;
padding-left: 5px;
padding-right: 5px;
padding-bottom: 5px;
box-shadow: 0 0 5px rgba(0,0,0,0.3);
border-radius: 5px;
}

:focus {
    outline: none!important;
}

</style>

:ET