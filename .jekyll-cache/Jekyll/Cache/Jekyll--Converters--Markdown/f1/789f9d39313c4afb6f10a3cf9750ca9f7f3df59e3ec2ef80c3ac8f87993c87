I"0ï<blockquote>
  <p>Ce document est un condens√© de tout ce que vous devriez savoir sur le JavaScript que vous allez rencontrer dans des projets modernes.</p>
</blockquote>

<p>Ce guide n‚Äôa pas √©t√© con√ßu pour vous apprendre JavaScript √† partir de rien, mais pour aider les d√©veloppeurs ayant des connaissances basiques qui ont des probl√®mes avec les codebases modernes (ou pour apprendre React, par exemple) √† cause des concepts JavaScript utilis√©s.</p>

<p>De plus, je vous donnerai parfois des conseils personnels qui pourraient porter √† d√©bat, mais je prendrai le soin de le mentionner lorsque je le ferai.</p>

<blockquote>
  <p><strong>Note:</strong> La plupart des concepts introduits ici viennent d‚Äôune mise √† jour du langage JavaScript (ES2015, souvent appel√© ES6. Vous pouvez trouver les nouvelles fonctionnalit√©s. ajout√©es par cette mise √† jour <a href="http://es6-features.org">ici</a> (ce site est vraiment bien fait !).</p>
</blockquote>

<h3 id="ressources-compl√©mentaires">Ressources compl√©mentaires</h3>

<p>Lorsque vous avez de la peine √† comprendre une notion, je vous sugg√®re de chercher des r√©ponses dans les ressources suivantes :</p>

<ul>
  <li><a href="https://developer.mozilla.org/en-US/search?q=">MDN (Mozilla Developer Network)</a></li>
  <li><a href="https://github.com/getify/You-Dont-Know-JS">You don‚Äôt know JS (livre)</a></li>
  <li><a href="http://es6-features.org">ES6 Features with examples</a></li>
  <li><a href="http://wesbos.com/category/es6/">WesBos blog (ES6)</a></li>
  <li><a href="https://www.udacity.com/course/javascript-basics--ud804">Javascript Basics for Beginners</a> - a free Udacity course</li>
  <li><a href="https://www.reddit.com/r/javascript/">Reddit (JavaScript)</a></li>
  <li><a href="https://www.google.com/">Google</a> pour trouver des blogs et des ressources sp√©cifiques</li>
  <li><a href="https://stackoverflow.com/questions/tagged/javascript">StackOverflow</a></li>
</ul>

<blockquote>
  <p><strong>Note:</strong> Presque toutes les ressources externes list√©es dans ce document sont en anglais, √† l‚Äôexception des liens menant vers le Mozilla Developer Network (MDN) qui lui est traduit en fran√ßais.</p>
</blockquote>

<h2 id="table-des-mati√®res">Table des mati√®res</h2>
<ul>
  <li><a href="#modern-javascript-cheatsheet">Modern JavaScript Cheatsheet</a>
    <ul>
      <li><a href="#introduction">Introduction</a>
        <ul>
          <li><a href="#motivation">Motivation</a></li>
          <li><a href="#ressources-compl√©mentaires">Ressources compl√©mentaires</a></li>
        </ul>
      </li>
      <li><a href="#table-des-mati√®res">Table des mati√®res</a></li>
      <li><a href="#notions">Notions</a>
        <ul>
          <li><a href="#d√©claration-des-variables--var-const-let">D√©claration des variables : var, const, let</a>
            <ul>
              <li><a href="#explication-br√®ve">Explication br√®ve</a></li>
              <li><a href="#code-dexemple">Code d‚Äôexemple</a></li>
              <li><a href="#explication-d√©taill√©e">Explication d√©taill√©e</a>
                <ul>
                  <li><a href="#var">var</a></li>
                  <li><a href="#let">let</a></li>
                  <li><a href="#const">const</a></li>
                </ul>
              </li>
              <li><a href="#ressources-externes">Ressources externes</a></li>
            </ul>
          </li>
          <li><a href="#-fonction-fl√©ch√©e"><a name="user-content-arrow_func_concept"></a> Fonction fl√©ch√©e</a>
            <ul>
              <li><a href="#code-dexemple-1">Code d‚Äôexemple</a></li>
              <li><a href="#explication-d√©taill√©e-1">Explication d√©taill√©e</a>
                <ul>
                  <li><a href="#concision">Concision</a></li>
                  <li><a href="#r√©f√©rence-de-this">R√©f√©rence de <em>this</em></a></li>
                </ul>
              </li>
              <li><a href="#ressources-utiles">Ressources utiles</a></li>
            </ul>
          </li>
          <li><a href="#valeur-par-d√©faut-dun-param√®tre-dans-une-fonction">Valeur par d√©faut d‚Äôun param√®tre dans une fonction</a>
            <ul>
              <li><a href="#external-resource">External resource</a></li>
            </ul>
          </li>
          <li><a href="#d√©structurer-des-objets-et-des-tableaux">D√©structurer des objets et des tableaux</a>
            <ul>
              <li><a href="#explication-avec-du-code">Explication avec du code</a></li>
              <li><a href="#ressources-utiles-1">Ressources utiles</a></li>
            </ul>
          </li>
          <li><a href="#m√©thodes-de-tableau--map--filter--reduce">M√©thodes de tableau : map / filter / reduce</a>
            <ul>
              <li><a href="#code-dexemple-2">Code d‚Äôexemple</a></li>
              <li><a href="#explication">Explication</a>
                <ul>
                  <li><a href="#arrayprototypemap">Array.prototype.map()</a></li>
                  <li><a href="#arrayprototypefilter">Array.prototype.filter()</a></li>
                  <li><a href="#arrayprototypereduce">Array.prototype.reduce()</a>
                    <ul>
                      <li><a href="#√Ä-la-premi√®re-√©tape-dit√©ration">√Ä la premi√®re √©tape d‚Äôit√©ration</a></li>
                      <li><a href="#√Ä-la-deuxi√®me-√©tape-dit√©ration">√Ä la deuxi√®me √©tape d‚Äôit√©ration</a></li>
                      <li><a href="#√Ä-la-troisi√®me-√©tape-dit√©ration">√Ä la troisi√®me √©tape d‚Äôit√©ration</a></li>
                      <li><a href="#√Ä-la-quatri√®me-√©tape-dit√©ration">√Ä la quatri√®me √©tape d‚Äôit√©ration</a></li>
                      <li><a href="#-√Ä-la-derni√®re-√©tape-dit√©ration">[‚Ä¶] √Ä la derni√®re √©tape d‚Äôit√©ration</a></li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li><a href="#ressource-externe">Ressource externe</a></li>
            </ul>
          </li>
          <li><a href="#op√©rateur-de-d√©composition-">Op√©rateur de d√©composition ‚Äú‚Ä¶‚Äù</a>
            <ul>
              <li><a href="#code-dexemple-3">Code d‚Äôexemple</a></li>
              <li><a href="#explication-1">Explication</a>
                <ul>
                  <li><a href="#dans-des-tableaux-comme-des-tableaux">Dans des tableaux (comme des tableaux)</a></li>
                  <li><a href="#param√®tre-de-reste-dune-fonction">Param√®tre de reste d‚Äôune fonction</a></li>
                  <li><a href="#d√©composition-des-propri√©t√©s-dun-objet">D√©composition des propri√©t√©s d‚Äôun objet</a></li>
                </ul>
              </li>
              <li><a href="#ressources-externes-1">Ressources externes</a></li>
            </ul>
          </li>
          <li><a href="#raccourci-pour-les-propri√©t√©s-dobjet">Raccourci pour les propri√©t√©s d‚Äôobjet</a>
            <ul>
              <li><a href="#explication-2">Explication</a></li>
              <li><a href="#ressources-externes-2">Ressources externes</a></li>
            </ul>
          </li>
          <li><a href="#promesses">Promesses</a>
            <ul>
              <li><a href="#code-dexemple-4">Code d‚Äôexemple</a></li>
              <li><a href="#explication-3">Explication</a>
                <ul>
                  <li><a href="#cr√©er-la-promesse">Cr√©er la promesse</a></li>
                  <li><a href="#utilisation-des-d√©clencheurs-de-promesse">Utilisation des d√©clencheurs de promesse</a></li>
                </ul>
              </li>
              <li><a href="#ressources-externes-3">Ressources externes</a></li>
            </ul>
          </li>
          <li><a href="#litt√©raux-de-mod√®le">Litt√©raux de mod√®le</a>
            <ul>
              <li><a href="#code-dexemple-5">Code d‚Äôexemple</a></li>
              <li><a href="#ressources-externes-4">Ressources externes</a></li>
            </ul>
          </li>
          <li><a href="#litt√©raux-de-mod√®le-√©tiquet√©s">Litt√©raux de mod√®le √©tiquet√©s</a>
            <ul>
              <li><a href="#ressources-externes-5">Ressources externes</a></li>
            </ul>
          </li>
          <li><a href="#imports--exports">Imports / exports</a>
            <ul>
              <li><a href="#explication-avec-un-code-dexemple">Explication avec un code d‚Äôexemple</a>
                <ul>
                  <li><a href="#exports-nomm√©s">Exports nomm√©s</a></li>
                  <li><a href="#importexport-par-d√©faut">Import/export par d√©faut</a></li>
                </ul>
              </li>
              <li><a href="#ressources-externes-6">Ressources externes</a></li>
            </ul>
          </li>
          <li><a href="#-this-en-javascript"><em>this</em> en JavaScript</a>
            <ul>
              <li><a href="#ressources-externes-7">Ressources externes</a></li>
            </ul>
          </li>
          <li><a href="#classe">Classe</a>
            <ul>
              <li><a href="#exemples">Exemples</a></li>
              <li><a href="#ressources-externes-8">Ressources externes</a></li>
            </ul>
          </li>
          <li><a href="#mots-cl√©s-extends-et-super">Mots cl√©s extends et <code>super</code></a>
            <ul>
              <li><a href="#code-dexemple-6">Code d‚Äôexemple</a></li>
              <li><a href="#ressources">Ressources</a></li>
            </ul>
          </li>
          <li><a href="#async-await">Async Await</a>
            <ul>
              <li><a href="#code-dexemple-7">Code d‚Äôexemple</a></li>
              <li><a href="#explication-avec-un-code-dexemple-1">Explication avec un code d‚Äôexemple</a>
                <ul>
                  <li><a href="#gestion-derreur">Gestion d‚Äôerreur</a></li>
                </ul>
              </li>
              <li><a href="#ressources-externes-9">Ressources externes</a></li>
            </ul>
          </li>
          <li><a href="#v√©rit√©--fausset√©">V√©rit√© / fausset√©</a>
            <ul>
              <li><a href="#ressources-externes-10">Ressources externes</a></li>
            </ul>
          </li>
          <li><a href="#m√©thodes-statiques">M√©thodes statiques</a>
            <ul>
              <li><a href="#explication-courte">Explication courte</a></li>
              <li><a href="#code-dexemple-8">Code d‚Äôexemple</a></li>
              <li><a href="#explication-d√©taill√©e-2">Explication d√©taill√©e</a>
                <ul>
                  <li><a href="#appeler-dautres-m√©thodes-statiques-depuis-une-m√©thode-statique">Appeler d‚Äôautres m√©thodes statiques depuis une m√©thode statique</a></li>
                  <li><a href="#appeler-des-m√©thodes-statiques-depuis-des-m√©thodes-non-statiques">Appeler des m√©thodes statiques depuis des m√©thodes non statiques</a>
                    <ul>
                      <li><a href="#en-utilisant-le-nom-de-la-classe">En utilisant le nom de la classe</a></li>
                      <li><a href="#avec-le-constructeur">Avec le constructeur</a></li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li><a href="#ressources-externes-11">Ressources externes</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#glossaire">Glossaire</a>
        <ul>
          <li><a href="#-port√©e-scope">Port√©e (<em>scope</em>)</a></li>
          <li><a href="#-mutation-de-variable">Mutation de variable</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="notions">Notions</h2>

<h3 id="d√©claration-des-variables--var-const-let">D√©claration des variables : var, const, let</h3>

<p>En JavaScript, il y a trois mots-cl√©s disponibles pour d√©clarer une variable, et chacun a ses diff√©rences. Ces mots-cl√©s sont <code class="highlighter-rouge">var</code>, <code class="highlighter-rouge">let</code> et <code class="highlighter-rouge">const</code>.</p>

<h4 id="explication-br√®ve">Explication br√®ve</h4>

<p>Les variables d√©clar√©es avec le mot-cl√© <code class="highlighter-rouge">const</code> ne peuvent pas √™tre r√©assign√©es, alors que celles d√©clar√©es avec <code class="highlighter-rouge">let</code> et <code class="highlighter-rouge">var</code> le peuvent.</p>

<p>Je vous recommande de toujours d√©clarer vos variables avec <code class="highlighter-rouge">const</code> par d√©faut, et avec <code class="highlighter-rouge">let</code> si vous avez besoin de la <em>muter</em> ou de la r√©assigner plus tard.</p>

<table>
  <tr>
    <th></th>
    <th>Port√©e</th>
    <th>R√©assignable</th>
    <th>Mutable</th>
   <th><a href="#tdz_sample">Temporal Dead Zone</a></th>
  </tr>
  <tr>
    <th>const</th>
    <td>Bloc</td>
    <td>Non</td>
    <td><a href="#const_mutable_sample">Oui</a></td>
    <td>Oui</td>
  </tr>
  <tr>
    <th>let</th>
    <td>Bloc</td>
    <td>Oui</td>
    <td>Oui</td>
    <td>Oui</td>
  </tr>
   <tr>
    <th>var</th>
    <td>Fonction</td>
    <td>Oui</td>
    <td>Oui</td>
    <td>Non</td>
  </tr>
</table>

<h4 id="code-dexemple">Code d‚Äôexemple</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">person</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span> <span class="c1">// D√©clenchera une erreur, person ne pouvant pas √™tre r√©assign√©</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">person</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="c1">// "John", le r√©assignement est permis avec let</span>
</code></pre></div></div>

<h4 id="explication-d√©taill√©e">Explication d√©taill√©e</h4>

<p>La <a href="#scope_def"><em>port√©e</em></a> d‚Äôune variable d√©finit ‚Äúo√π la variable est disponible dans le code‚Äù.</p>

<h5 id="var">var</h5>

<p>La port√©e des variables d√©clar√©es avec <code class="highlighter-rouge">var</code> s‚Äô√©tend √† la fonction qui la contient, ce qui signifie que lorsqu‚Äòune variable est cr√©√©e dans une fonction, tout dans cette fonction peut y acc√©der. De plus, on ne pourra pas acc√©der √† cette variable de l‚Äôext√©rieur de cette fonction.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunction</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">);</span> <span class="c1">// "Nick" - myVar est accessible √† l'int√©rieur de la fonction</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">);</span> <span class="c1">// √âmet une ReferenceError, myVar n'est pas accessible en dehors de la fonction</span>
</code></pre></div></div>

<p>Voici un exemple plus subtil, toujours sur la port√©e des variables :</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunction</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">);</span> <span class="c1">// "John"</span>
    <span class="c1">// La port√©e de myVar s'√©tendant √† toute la fonction, nous venons d'√©craser la valeur pr√©c√©dente de myVar ("Nick"), qui est devenue "John"</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">);</span> <span class="c1">// "John" - les instructions dans le bloc if ont affect√© cette valeur</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">);</span> <span class="c1">// Produit une ReferenceError, myVar n'√©tant pas disponible en dehors de la fonction</span>
</code></pre></div></div>

<p>De plus, les variables d√©clar√©es avec <em>var</em> sont d√©plac√©es tout en haut de leur port√©e √† l‚Äôex√©cution. Ce comportement est appel√© <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/var#La_remont√©e_de_variables_(hoisting)">var hoisting</a>.</p>

<p>Ce bout de code :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">)</span> <span class="c1">// undefined -- aucune erreur produite</span>
<span class="kd">var</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</code></pre></div></div>

<p>est compris √† l‚Äôex√©cution comme :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">myVar</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">)</span> <span class="c1">// undefined -- aucune erreur produite</span>
<span class="nx">myVar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</code></pre></div></div>

<h5 id="let">let</h5>

<p><code class="highlighter-rouge">var</code> et <code class="highlighter-rouge">let</code> sont presque identiques, mais les variables d√©clar√©es avec <code class="highlighter-rouge">let</code></p>

<ul>
  <li>ont leur port√©e qui est limit√©e au bloc qui les entoure</li>
  <li>ne sont <strong>pas</strong> accessibles avant d‚Äô√™tre assign√©es</li>
  <li>ne peuvent pas √™tre red√©clar√©es dans la m√™me port√©e</li>
</ul>

<p>Observons l‚Äôimpact de la nouvelle port√©e dans l‚Äôexemple pr√©c√©dent :</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunction</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">);</span> <span class="c1">// "John"</span>
    <span class="c1">// la port√©e de myVar √©tant limit√©e au bloc if, nous venons de cr√©√©er une nouvelle variable myVar.</span>
    <span class="c1">// cette variable n'est pas accessible en dehors du bloc if</span>
    <span class="c1">// et est totalement ind√©pendante du premier myVar cr√©√©.</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">);</span> <span class="c1">// "Nick" - les instructions dans le bloc if n'ont PAS affect√© cette valeur</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">);</span> <span class="c1">// Produit une ReferenceError, myVar n'√©tant pas disponible en dehors de la fonction</span>
</code></pre></div></div>

<p><a name="tdz_sample"></a> Maintenant, observons ce que signifie pour les variables cr√©√©es avec <em>let</em> (et <em>const</em>) de ne pas √™tre accessibles avant d‚Äôavoir √©t√© assign√©es :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myVar</span><span class="p">)</span> <span class="c1">// d√©clenche une ReferenceError !</span>
<span class="kd">let</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</code></pre></div></div>

<p>Contrairement aux variables <em>var</em>, si vous essayez de lire ou d‚Äô√©crire dans une variable <em>let</em> ou <em>const</em> avant d‚Äô√™tre assign√©es une erreur se produira. Ce ph√©nom√®ne est souvent appel√© <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_Dead_Zone_and_errors_with_let"><em>Temporal dead zone</em></a> ou <em>TDZ</em>.</p>

<blockquote>
  <p><strong>Note :</strong> Techniquement, les d√©clarations de variables <em>let</em> and <em>const</em>sont aussi affect√©es par le <em>var hoisting</em>, mais pas leur assignation. Vu qu‚Äôelles sont faite pour ne pas pouvoir √™tre utilis√©es avant l‚Äôassignation, on a l‚Äôimpression qu‚Äôil n‚Äôy a pas de <em>hoisting</em>, mais il y en a un. Si vous voulez en savoir plus, vous pouvez lire cette <a href="http://jsrocks.org/2015/01/temporal-dead-zone-tdz-demystified">explication tr√®s d√©taill√©e</a>.</p>
</blockquote>

<p>Par ailleurs, vous ne pouvez pas re-d√©clarer une variable <em>let</em> :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// Produit une SyntaxError</span>
</code></pre></div></div>

<h5 id="const">const</h5>

<p>Les variables d√©clar√©es avec<code class="highlighter-rouge">const</code> se comportent comme des variables <em>let</em>, mais elles ne peuvent pas √™tre r√©assign√©es.</p>

<p>Pour r√©sumer, les variables <em>const</em> :</p>

<ul>
  <li>ont leur port√©e qui est limit√©e au bloc qui les entoure</li>
  <li>ne sont pas accessibles avant leur assignation</li>
  <li>ne peuvent pas √™tre red√©clar√©es dans la m√™me port√©e</li>
  <li>ne peuvent pas √™tre r√©assign√©es</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">myVar</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span> <span class="c1">// cause une erreur, le r√©assignement n'est pas permis</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span> <span class="c1">// cause une erreur, la red√©claration n'est pas permise</span>
</code></pre></div></div>

<p><a name="const_mutable_sample"></a> Mais il y a une subtilit√© : les variables <code class="highlighter-rouge">const</code> ne sont pas <a href="#mutation_def"><strong>immutables</strong></a> ! Concr√®tement, cela signifie que les <em>objets</em> et <em>tableaux</em> <code class="highlighter-rouge">const</code> <strong>peuvent</strong> √™tre mut√©es.</p>

<p>Pour les objets :</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Nick</span><span class="dl">'</span>
<span class="p">};</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span> <span class="c1">// ceci fonctionnera ! la variable person n'est pas compl√®tement r√©assign√©e, mais mut√©e</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">// "John"</span>
<span class="nx">person</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Sandra</span><span class="dl">"</span> <span class="c1">// cause une erreur, car le r√©assignement n'est pas autoris√© avec les variables d√©clar√©es avec const</span>
</code></pre></div></div>

<p>Pour les tableaux :</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">[];</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// ceci fonctionnera ! la variable person n'est pas compl√®tement r√©assign√©e, mais mut√©e</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1">// "John"</span>
<span class="nx">person</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">]</span>  <span class="c1">// cause une erreur, car le r√©assignement n'est pas autoris√© avec les variables d√©clar√©es avec const</span>
</code></pre></div></div>

<h4 id="ressources-externes">Ressources externes</h4>

<ul>
  <li><a href="http://wesbos.com/javascript-scoping/">How let and const are scoped in JavaScript - WesBos</a></li>
  <li><a href="http://jsrocks.org/2015/01/temporal-dead-zone-tdz-demystified">Temporal Dead Zone (TDZ) Demystified</a></li>
</ul>

<h3 id="-fonction-fl√©ch√©e"><a name="arrow_func_concept"></a> Fonction fl√©ch√©e</h3>

<p>Avec la mise √† jour ES6 de JavaScript, nous pouvons utiliser des <em>fonctions fl√©ch√©es</em>, qui sont un autre moyen de d√©clarer et d‚Äôutiliser des fonctions. Voici les b√©n√©fices qu‚Äôelles apportent :</p>

<ul>
  <li>Plus concis</li>
  <li><em>this</em> se r√©f√®re √† l‚Äôext√©rieur de la fonction fl√©ch√©e</li>
  <li><code class="highlighter-rouge">return</code> implicite</li>
</ul>

<h4 id="code-dexemple-1">Code d‚Äôexemple</h4>

<ul>
  <li>Concision et retour implicite</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">double</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="p">}</span> <span class="c1">// Mani√®re traditionnelle</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">double</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span> <span class="c1">// 4</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">double</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// M√™me fonction √©crite sous forme de fonction fl√©ch√©e avec un retour implicite</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">double</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span> <span class="c1">// 4</span>
</code></pre></div></div>

<ul>
  <li>R√©f√©rence de <em>this</em></li>
</ul>

<p>Dans une fonction fl√©ch√©e, <em>this</em> est √©gal √† la valeur de <em>this</em> dans le contexte d‚Äôex√©cution alentour. Basiquement, avec les fonctions fl√©ch√©es, vous n‚Äô√™tes plus oblig√© d‚Äôutiliser l‚Äôastuce ‚Äúthat = this‚Äù avant d‚Äôappeler une fonction √† l‚Äôint√©rieur d‚Äôune fonction.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">myVar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">myVar</span><span class="o">++</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">myVar</span><span class="p">)</span> <span class="c1">// 1</span>
  <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="explication-d√©taill√©e-1">Explication d√©taill√©e</h4>

<h5 id="concision">Concision</h5>

<p>Les fonctions fl√©ch√©es sont plus concises que les fonctions traditionnelles par plusieurs aspects. Voyons tous les cas possibles :</p>

<ul>
  <li>Retour implicite VS explicite</li>
</ul>

<p>Un <strong>retour explicite</strong> est une fonction o√π le mot-cl√© <code class="highlighter-rouge">return</code> est utilis√© dans son corps.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">double</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// cette fonction retourne explicitement x * 2, le mot-cl√© return est utilis√©</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>Dans l‚Äô√©criture de foncitons traditionnelle, le retour √©tait toujours explicite. Mais avec les fonctions fl√©ch√©es, vous pouvez faire un <em>retour implicite</em> ce qui signifie que vous n‚Äô√™tes pas oblig√©s d‚Äôutiliser le mot-cl√© <em>return</em> pour retourner une valeur.</p>

<p>Pour faire un retour implicite, le code doit √™tre √©crit en une ligne.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">double</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// Ce retour est explicite</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>Comme il n‚Äôy a qu‚Äôun retour de valeur ici, nous pouvons utiliser un retour implicite.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">double</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</code></pre></div></div>

<p>Pour ce faire, il nous suffit de <strong>supprimer les accolades</strong> et le mot-cl√© <strong>return</strong>. C‚Äôest pour cette raison qu‚Äôon qualifie ce retour d‚Äô<em>implicite</em> : le mot-cl√© <em>return</em> n‚Äôest pas l√†. mais la fonction va bien retourner <code class="highlighter-rouge">x * 2</code>.</p>

<blockquote>
  <p><strong>Note :</strong> Si votre fonction ne retourne aucune valeur (avec des <em>effets secondaires</em>), elle ne fait ni retour implicite ni explicite.</p>
</blockquote>

<p>De plus, si vous voulez retourner un <em>objet</em> vous <strong>devez mettre des parenth√®ses autour</strong> pour √©viter un conflit avec les accolades de bloc :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getPerson</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">24</span> <span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getPerson</span><span class="p">())</span> <span class="c1">// { name: "Nick", age: 24 } -- l'objet est implicitement retourn√© par la fonction fl√©ch√©e</span>
</code></pre></div></div>

<ul>
  <li>Uniquement un argument</li>
</ul>

<p>Si votre fonction ne prend qu‚Äôun param√®tre, vous pouvez omettre les parenth√®ses autour. En reprenant un exemple au dessus :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">double</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// cette fonction fl√©ch√©e ne prend qu'un param√®tre</span>
</code></pre></div></div>

<p>Les parenth√®ses autour du param√®tre peuvent √™tre √©vit√©es :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">double</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// cette fonction fl√©ch√©e ne prend qu'un param√®tre</span>
</code></pre></div></div>

<ul>
  <li>Pas de param√®tres</li>
</ul>

<p>Lorsqu‚Äôune fonction fl√©ch√©e ne prend aucun param√®tre, vous devez obligatoirement mettre des parenth√®ses pour que la syntaxe soit valide :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// avec des parenth√®ses, tout fonctionne</span>
    <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// pas de parenth√®ses, ceci ne fonctionnera pas !</span>
    <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<h5 id="r√©f√©rence-de-this">R√©f√©rence de <em>this</em></h5>

<p>Pour comprendre cette subtilit√© des fonctions fl√©ch√©es, vous devez savoir comment <a href="#this_def">this</a> fonctionne en JavaScript.</p>

<p>Dans une fonction fl√©ch√©e, <em>this</em> est √©gal √† la valeur de <em>this</em> dans le contexte d‚Äôex√©cution alentour. Cela signifie qu‚Äôune fonction fl√©ch√©e ne cr√©√©e pas de nouveau <em>this</em>, mais le prend autour √† la place.</p>

<p>Sans une fonction fl√©ch√©e, pour acc√©der √† une variable pr√©sente dans <em>this</em> dans une fonction √† l‚Äôint√©rieur d‚Äôune fonction, vous deviez utiliser l‚Äôastuce de <em>that = this</em> ou <em>self = this</em>.</p>

<p>Par exemple, voici comment utiliser setTimeout √† l‚Äôint√©rieur de myFunc :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">myVar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span> <span class="c1">// astuce that = this</span>
  <span class="nx">setTimeout</span><span class="p">(</span>
    <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// Un nouveau *this* est cr√©√© dans la port√©e de cette fonction</span>
      <span class="nx">that</span><span class="p">.</span><span class="nx">myVar</span><span class="o">++</span><span class="p">;</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">myVar</span><span class="p">)</span> <span class="c1">// 1</span>

      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">myVar</span><span class="p">)</span> <span class="c1">// undefined -- voir la d√©claration de fonction au-dessus</span>
    <span class="p">},</span>
    <span class="mi">0</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Mais avec une fonction fl√©ch√©e, <em>this</em> est pris de l‚Äôext√©rieur :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">myVar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="nx">setTimeout</span><span class="p">(</span>
    <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// this pris de l'ext√©rieur, signifiant myFunc ici</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">myVar</span><span class="o">++</span><span class="p">;</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">myVar</span><span class="p">)</span> <span class="c1">// 1</span>
    <span class="p">},</span>
    <span class="mi">0</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="ressources-utiles">Ressources utiles</h4>

<ul>
  <li><a href="http://wesbos.com/arrow-functions/">Arrow functions introduction - WesBos</a></li>
  <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Fonctions/Fonctions_fl%C3%A9ch%C3%A9es">Fonction fl√©ch√©es - MDN</a></li>
  <li><a href="https://hackernoon.com/javascript-es6-arrow-functions-and-lexical-this-f2a3e2a5e8c4">Arrow function and lexical <em>this</em></a></li>
</ul>

<h3 id="valeur-par-d√©faut-dun-param√®tre-dans-une-fonction">Valeur par d√©faut d‚Äôun param√®tre dans une fonction</h3>

<p>√Ä partir de la mise √† jour de JavaScript ES2015, vous pouvez assigner une valeur par d√©faut √† un param√®tre de fonction en utilisant la syntaxe suivante</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myFunc</span><span class="p">())</span> <span class="c1">// 10 -- aucune valeur n'√©tant donn√©e, la valeur par d√©faut est utilis√©e</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myFunc</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span> <span class="c1">// 5 -- une valeur est donn√©e donc x est √©gal √† 5 dans myFunc</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myFunc</span><span class="p">(</span><span class="kc">undefined</span><span class="p">))</span> <span class="c1">// 10 -- la valeur undefined est donn√©e, donc x est assign√© √† la valeur par d√©faut</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myFunc</span><span class="p">(</span><span class="kc">null</span><span class="p">))</span> <span class="c1">// null -- une valeur (null) √©tant donn√©e, voir plus bas pour plus de d√©tails</span>
</code></pre></div></div>

<p>Le param√®tre par d√©faut est utilis√© dans deux et uniquement deux situations :</p>

<ul>
  <li>Aucun param√®tre n‚Äôest fourni</li>
  <li>Le param√®ter <em>undefined</em> est fourni</li>
</ul>

<p>Autrement dit, si vous passez <em>null</em> le param√®tre par d√©faut <strong>ne sera pas appliqu√©</strong>.</p>

<blockquote>
  <p><strong>Note :</strong> Un assignement de valeur par d√©faut peut √™tre utilis√© avec des param√®tres d√©structur√©s √©galement (voyez la notion suivante pour avoir un exemple).</p>
</blockquote>

<h4 id="external-resource">External resource</h4>

<ul>
  <li><a href="http://es6-features.org/#DefaultParameterValues">Default parameter value - ES6 Features</a></li>
  <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Fonctions/Valeurs_par_d%C3%A9faut_des_arguments">Valeurs par d√©faut des arguments - MDN</a></li>
</ul>

<h3 id="d√©structurer-des-objets-et-des-tableaux">D√©structurer des objets et des tableaux</h3>

<p>La <em>d√©structuration</em> un moyen pratique de cr√©er de nouvelles variables en extrayant des valeurs des donn√©es enregistr√©es dans des objets ou des tableaux.</p>

<p>Pour nommer quelque cas d‚Äôutilisation, la <em>d√©structuration</em> peut √™tre utilis√©e pour d√©structurer des param√®tres de fonction ou <em>this.props</em> dans des projets React par exemple.</p>

<h4 id="explication-avec-du-code">Explication avec du code</h4>

<ul>
  <li>Objet</li>
</ul>

<p>Prenons l‚Äôobjet suivant pour tous les exemples</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Anderson</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">35</span><span class="p">,</span>
  <span class="na">sex</span><span class="p">:</span> <span class="dl">"</span><span class="s2">M</span><span class="dl">"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Sans d√©structuration :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">first</span> <span class="o">=</span> <span class="nx">person</span><span class="p">.</span><span class="nx">firstName</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">age</span> <span class="o">=</span> <span class="nx">person</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">city</span> <span class="o">=</span> <span class="nx">person</span><span class="p">.</span><span class="nx">city</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">Paris</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>Avec la d√©structuration, tout en une ligne :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="na">firstName</span><span class="p">:</span> <span class="nx">first</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">city</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Paris</span><span class="dl">"</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span> <span class="c1">// Et voil√† !</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">age</span><span class="p">)</span> <span class="c1">// 35 -- Une nouvelle variable age est cr√©√©e et est √©gale √† person.age</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span><span class="p">)</span> <span class="c1">// "Nick" -- Une nouvelle variable first est cr√©√©e et est √©gale √† person.firstName</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">)</span> <span class="c1">// ReferenceError -- person.firstName existe MAIS la nouvelle variable cr√©√©e est nomm√©e first</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">city</span><span class="p">)</span> <span class="c1">// "Paris" -- Une nouvelle variable city est cr√©√©e et comme person.city n'est pas d√©fini, city est √©gal √† la valeur par d√©faut donn√©e, √† savoir "Paris"</span>
</code></pre></div></div>

<p><strong>Note :</strong> Dans <code class="highlighter-rouge">const { age } = person;</code>, les accolades apr√®s le mot-cl√© <em>const</em> ne sont pas utilis√©es pour d√©clarer un objet ou un bloc, mais font partie de la syntaxe de <em>d√©structuration</em>.</p>

<ul>
  <li>Param√®tres de fonction</li>
</ul>

<p>La <em>destructuring</em> est souvent utilis√©e pour d√©structurer les param√®tres de fonction sous la forme d‚Äôobjets.</p>

<p>Sans d√©structuration :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">joinFirstLastName</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="nx">person</span><span class="p">.</span><span class="nx">firstName</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">lastName</span> <span class="o">=</span> <span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">firstName</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">joinFirstLastName</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// "Nick-Anderson"</span>
</code></pre></div></div>

<p>En d√©structurant le param√®tre objet <em>person</em>, nous obtenons une fonction plus concise :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">joinFirstLastName</span><span class="p">({</span> <span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span> <span class="p">})</span> <span class="p">{</span> <span class="c1">// nous cr√©√©ons les variables firstName et lastName en d√©structurant le param√®tre person</span>
  <span class="k">return</span> <span class="nx">firstName</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">joinFirstLastName</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// "Nick-Anderson"</span>
</code></pre></div></div>

<p>La d√©structuration est encore plus agr√©able √† utiliser avec les <a href="#arrow_func_concept">fonctions fl√©ch√©es</a> :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">joinFirstLastName</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">firstName</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">;</span>

<span class="nx">joinFirstLastName</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// "Nick-Anderson"</span>
</code></pre></div></div>

<ul>
  <li>Tableau</li>
</ul>

<p>Utilisons le tableau suivant :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span><span class="p">];</span>
</code></pre></div></div>

<p>Sans la destructuration :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">myArray</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">myArray</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</code></pre></div></div>

<p>Avec :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">]</span> <span class="o">=</span> <span class="nx">myArray</span><span class="p">;</span> <span class="c1">// Et voil√† !</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// "a"</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="c1">// "b"</span>
</code></pre></div></div>

<h4 id="ressources-utiles-1">Ressources utiles</h4>

<ul>
  <li><a href="http://es6-features.org/#ArrayMatching">ES6 Features - Destructuring Assignment</a></li>
  <li><a href="http://wesbos.com/destructuring-objects/">Destructuring Objects - WesBos</a></li>
  <li><a href="http://exploringjs.com/es6/ch_destructuring.html">ExploringJS - Destructuring</a></li>
</ul>

<h3 id="m√©thodes-de-tableau--map--filter--reduce">M√©thodes de tableau : map / filter / reduce</h3>

<p><em>Map</em>, <em>filter</em> et <em>reduce</em> sont des m√©thodes de tableau qui viennent avec un paradigme de programmation appel√© la <a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0"><em>programmation fonctionnelle</em></a>.</p>

<p>Pour r√©sumer :</p>

<ul>
  <li><strong>Array.prototype.map()</strong> prend un tableau, fait quelque chose sur ses √©l√©ments et retourne un tableau contenant les √©l√©ments transform√©s.</li>
  <li><strong>Array.prototype.filter()</strong> prend un tableau, d√©cide √©l√©ment par √©l√©ment s‚Äôil faut le garder ou non et retourne un tableau contenant uniquement les √©l√©ments conserv√©s.</li>
  <li><strong>Array.prototype.reduce()</strong> prend un tableau et agr√®ge ses √©l√©ments en une seule valeur (qui est retourn√©e).</li>
</ul>

<p>Je recommande de les utiliser autant que possibles pour suivre les principes de la programmation fonctionelle car ils sont composables, concis et √©l√©gants.</p>

<p>Avec toutes ces m√©thodes, vous pouvez √©viter l‚Äôutilisation des boucles <em>for</em> et <em>forEach</em> dans la plupart des situations. Vous pouvez avoir de la peine au d√©but √† les utiliser car ils vous obligent √† apprendre une nouvelle fa√ßon de penser, mais une fois que vous avez compris comment cela fonctionne tout devient plus facile.</p>

<h4 id="code-dexemple-2">Code d‚Äôexemple</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">doubledNumbers</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">n</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// [0, 2, 4, 6, 8, 10, 12]</span>
<span class="kd">const</span> <span class="nx">evenNumbers</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">n</span> <span class="o">=&gt;</span> <span class="nx">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// [0, 2, 4, 6]</span>
<span class="kd">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">next</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// 21</span>
</code></pre></div></div>

<p>Calculer la somme des notes (<code class="highlighter-rouge">grades</code>) des √©tudiants ayant eu plus que 10 en utilisant map, filter et reduce :</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">students</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">,</span> <span class="na">grade</span><span class="p">:</span> <span class="mi">10</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="na">grade</span><span class="p">:</span> <span class="mi">15</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Julia</span><span class="dl">"</span><span class="p">,</span> <span class="na">grade</span><span class="p">:</span> <span class="mi">19</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Nathalie</span><span class="dl">"</span><span class="p">,</span> <span class="na">grade</span><span class="p">:</span> <span class="mi">9</span> <span class="p">},</span>
<span class="p">];</span>

<span class="kd">const</span> <span class="nx">aboveTenSum</span> <span class="o">=</span> <span class="nx">students</span>
  <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">student</span> <span class="o">=&gt;</span> <span class="nx">student</span><span class="p">.</span><span class="nx">grade</span><span class="p">)</span> <span class="c1">// nous transformons le tableau students en un tableau contenant leurs notes</span>
  <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">grade</span> <span class="o">=&gt;</span> <span class="nx">grade</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">)</span> <span class="c1">// nous filtrons le tableau des notes pour ne conserver que celles sup√©rieures ou √©gales √† 10</span>
  <span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">next</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// nous additionnons toutes les notes au dessus de 10 une par une</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">aboveTenSum</span><span class="p">)</span> <span class="c1">// 44 -- 10 (Nick) + 15 (John) + 19 (Julia), Nathalie √©tant ignor√©e car sa note est inf√©rieure √† 10</span>
</code></pre></div></div>

<h4 id="explication">Explication</h4>

<p>Prenons le tableau de nombres pour nos exemples :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>
</code></pre></div></div>

<h5 id="arrayprototypemap">Array.prototype.map()</h5>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">doubledNumbers</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doubledNumbers</span><span class="p">);</span> <span class="c1">// [0, 2, 4, 6, 8, 10, 12]</span>
</code></pre></div></div>

<p>Que se passe-t-il ici ? Nous utilisons .map sur le tableau <em>numbers</em>, le map it√®re sur chaque √©l√©ment du tableau et le passe √† notre fonction. Le but de la fonction est de produire et de retourner une nouvelle valeur pour chaque valeur donn√©e pour que le map puisse la remplacer.</p>

<p>Extrayons cette fonction pour la rendre plus claire, juste pour cette fois-ci :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">doubleN</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">doubledNumbers</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">doubleN</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doubledNumbers</span><span class="p">);</span> <span class="c1">// [0, 2, 4, 6, 8, 10, 12]</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">numbers.map(doubleN)</code> produit <code class="highlighter-rouge">[doubleN(0), doubleN(1), doubleN(2), doubleN(3), doubleN(4), doubleN(5), doubleN(6)]</code> ce qui est √©gal √† <code class="highlighter-rouge">[0, 2, 4, 6, 8, 10, 12]</code>.</p>

<blockquote>
  <p><strong>Note :</strong> Si vous n‚Äôavez pas besoin d‚Äôun nouveau tableau et que vous voulant juste avoir une boucle ayant des effets secondaires, vous pourriez juste avoir besoin d‚Äôune boucle for / forEach √† la place d‚Äôun map.</p>
</blockquote>

<h5 id="arrayprototypefilter">Array.prototype.filter()</h5>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">evenNumbers</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// true si "n" est pair, false si "n" est impair</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">evenNumbers</span><span class="p">);</span> <span class="c1">// [0, 2, 4, 6]</span>
</code></pre></div></div>

<p>Nous utilisons .filter sur le tableau <em>numbers</em> : filter it√®re sur chaque √©l√©ment du tableau et le passe √† notre fonction. Le but de la fonction est de retourner un bool√©en qui d√©terminera si la valeur actuelle sera conserv√©e. Filter retourne ensuite le tableau avec uniquement les valeurs conserv√©es.</p>

<h5 id="arrayprototypereduce">Array.prototype.reduce()</h5>

<p>Le but de la m√©thode reduce est de r√©duire tous les √©l√©ments du tableau sur lequel elle it√®re √† une seule valeur. Vous d√©cidez de la mani√®re dont les √©l√©ments sont agr√©g√©s.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">n</span><span class="p">;</span>
  <span class="p">},</span>
  <span class="mi">0</span> <span class="c1">// valeur de l'accumulateur √† la premi√®re it√©ration</span>
<span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span> <span class="c1">//21</span>
</code></pre></div></div>

<p>Tout comme pour les m√©thodes .map et .filter, .reduce est appliqu√© sur un tableau et prend une fonction en premier param√®tre.</p>

<p>Cette fois cependant, il y a des changements :</p>

<ul>
  <li>.reduce prend deux param√®tres</li>
</ul>

<p>Le premier param√®tre est une fonction qui sera appel√©e √† chaque √©tape d‚Äôit√©raiton.</p>

<p>Le second param√®tre est la valeur de la variable d‚Äôaccumulation (<em>acc</em> ici) √† la premi√®re √©tape d‚Äôit√©ration (lisez le point suivant pour comprendre).</p>

<ul>
  <li>Param√®ters de fonction</li>
</ul>

<p>La fonction que vous passez comme premier param√®tre de .reduce prend deux param√®tres. Le premier (<em>acc</em> ici) est la variable d‚Äôaccumulateur, tandis que le second param√®tre (<em>n</em>) est l‚Äô√©l√©ment actuel.</p>

<p>La variable d‚Äôaccumulateur est √©gale √† la valeur retourn√©e par votre fonction √† l‚Äô√©tape d‚Äôit√©ration <strong>pr√©c√©dente</strong>. √Ä la premi√®re √©tape de l‚Äôit√©ration, <em>acc</em> est √©gale √† la valeur que vous avez pass√© au second param√®tre de .reduce.</p>

<h6 id="√†-la-premi√®re-√©tape-dit√©ration">√Ä la premi√®re √©tape d‚Äôit√©ration</h6>

<p><code class="highlighter-rouge">acc = 0</code> car nous avons pass√© 0 comme second param√®tre √† reduce.</p>

<p><code class="highlighter-rouge">n = 0</code> premier √©l√©ment du tableau <em>number</em></p>

<p>La fonction retourne <em>acc</em> + <em>n</em> ‚Äì&gt; 0 + 0 ‚Äì&gt; 0</p>

<h6 id="√†-la-deuxi√®me-√©tape-dit√©ration">√Ä la deuxi√®me √©tape d‚Äôit√©ration</h6>

<p><code class="highlighter-rouge">acc = 0</code> car c‚Äôest la valeur retourn√©e par la fonction √† l‚Äô√©tape d‚Äôit√©ration pr√©c√©dente</p>

<p><code class="highlighter-rouge">n = 1</code> deuxi√®me √©l√©ment du tableau <em>number</em></p>

<p>La fonction retourne <em>acc</em> + <em>n</em> ‚Äì&gt; 0 + 1 ‚Äì&gt; 1</p>

<h6 id="√†-la-troisi√®me-√©tape-dit√©ration">√Ä la troisi√®me √©tape d‚Äôit√©ration</h6>

<p><code class="highlighter-rouge">acc = 1</code> car c‚Äôest la valeur retourn√©e par la fonction √† l‚Äô√©tape d‚Äôit√©ration pr√©c√©dente</p>

<p><code class="highlighter-rouge">n = 2</code> troisi√®me √©l√©ment du tableau <em>number</em></p>

<p>La fonction retourne <em>acc</em> + <em>n</em> ‚Äì&gt; 1 + 2 ‚Äì&gt; 3</p>

<h6 id="√†-la-quatri√®me-√©tape-dit√©ration">√Ä la quatri√®me √©tape d‚Äôit√©ration</h6>

<p><code class="highlighter-rouge">acc = 3</code> car c‚Äôest la valeur retourn√©e par la fonction √† l‚Äô√©tape d‚Äôit√©ration pr√©c√©dente</p>

<p><code class="highlighter-rouge">n = 3</code> quatri√®me √©l√©ment du tableau <em>number</em></p>

<p>La fonction retourne <em>acc</em> + <em>n</em> ‚Äì&gt; 3 + 3 ‚Äì&gt; 6</p>

<h6 id="-√†-la-derni√®re-√©tape-dit√©ration">[‚Ä¶] √Ä la derni√®re √©tape d‚Äôit√©ration</h6>

<p><code class="highlighter-rouge">acc = 15</code> car c‚Äôest la valeur retourn√©e par la fonction √† l‚Äô√©tape d‚Äôit√©ration pr√©c√©dente</p>

<p><code class="highlighter-rouge">n = 6</code> dernier √©l√©ment du tableau <em>number</em></p>

<p>La fonction retourne <em>acc</em> + <em>n</em> ‚Äì&gt; 15 + 6 ‚Äì&gt; 21</p>

<p>Comme c‚Äôest la derni√®re √©tape d‚Äôit√©ration, <strong>.reduce</strong> retourne 21.</p>

<h4 id="ressource-externe">Ressource externe</h4>

<ul>
  <li><a href="https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464">Understanding map / filter / reduce in JS</a></li>
</ul>

<h3 id="op√©rateur-de-d√©composition-">Op√©rateur de d√©composition ‚Äú‚Ä¶‚Äù</h3>

<p>L‚Äôop√©rateur de d√©composition <code class="highlighter-rouge">...</code> existe depuis ES2015 et est utilis√© pour d√©composer les √©l√©ments d‚Äôun it√©rable (comme un tableau) dans des emplacements qui peuvent contenir plusieurs √©l√©ments.</p>

<h4 id="code-dexemple-3">Code d‚Äôexemple</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">arr1</span><span class="p">,</span> <span class="dl">"</span><span class="s2">d</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">e</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">f</span><span class="dl">"</span><span class="p">];</span> <span class="c1">// ["a", "b", "c", "d", "e", "f"]</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="p">...</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">myFunc</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">d</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">e</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">f</span><span class="dl">"</span><span class="p">)</span>
<span class="c1">// "a"</span>
<span class="c1">// "b"</span>
<span class="c1">// ["c", "d", "e", "f"]</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="p">...</span><span class="nx">z</span> <span class="p">}</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">a</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="mi">4</span> <span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span> <span class="c1">// { a: 3, b: 4 }</span>

<span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="p">...</span><span class="nx">z</span> <span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span> <span class="c1">// { x: 1, y: 2, a: 3, b: 4 }</span>
</code></pre></div></div>

<h4 id="explication-1">Explication</h4>

<h5 id="dans-des-tableaux-comme-des-tableaux">Dans des tableaux (comme des tableaux)</h5>

<p>Si nous avons les deux tableaux suivants :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="nx">arr1</span><span class="p">,</span> <span class="dl">"</span><span class="s2">d</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">e</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">f</span><span class="dl">"</span><span class="p">];</span> <span class="c1">// [["a", "b", "c"], "d", "e", "f"]</span>
</code></pre></div></div>

<p>Le premier √©l√©ment d‚Äô<em>arr2</em> est un tableau, car <em>arr1</em> est inject√© tel quel dans <em>arr2</em>. Cependant, nous voulons que <em>arr2</em> soit un tableau de lettres. Pour ce faire, nous pouvons <em>d√©composer</em> les √©l√©ments d‚Äô<em>arr1</em> dans <em>arr2</em>.</p>

<p>Avec l‚Äôop√©rateur de d√©composition :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">arr1</span><span class="p">,</span> <span class="dl">"</span><span class="s2">d</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">e</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">f</span><span class="dl">"</span><span class="p">];</span> <span class="c1">// ["a", "b", "c", "d", "e", "f"]</span>
</code></pre></div></div>

<h5 id="param√®tre-de-reste-dune-fonction">Param√®tre de reste d‚Äôune fonction</h5>

<p>Dans les param√®tres d‚Äôune fonction, nous pouvons utiliser l‚Äôop√©rateur de reste pour injecter les param√®tres dans un tableau dans lequel nous pouvons faire une bocle. Il existe d√©j√† un objet <strong>arguments</strong> li√© √† chaque fonction, qui est un tableau contenant tous les param√®tres pass√©s √† la fonction.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">myFunc</span><span class="p">(</span><span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Anderson</span><span class="dl">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
<span class="c1">// "Nick"</span>
<span class="c1">// "Anderson"</span>
<span class="c1">// 10</span>
<span class="c1">// 12</span>
<span class="c1">// 6</span>
</code></pre></div></div>

<p>Mais imaginons que nous voulons que cette fonction cr√©√©e un nouvel √©dudiant avec ses notes et sa note moyenne. Ne serait-il pas plus pratique d‚Äôextraire les deux premiers param√®tres dans deux variables s√©par√©es, et d‚Äôavoir les notes dans un tableau sur lequel nous pourrions effectuer une boucle ?</p>

<p>C‚Äôest exactement ce que l‚Äôop√©rateur de reste nous permet de faire !</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">createStudent</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="p">...</span><span class="nx">grades</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// firstName = "Nick"</span>
  <span class="c1">// lastName = "Anderson"</span>
  <span class="c1">// [10, 12, 6] -- "..." prend tous les autres param√®tres pass√©s, cr√©√©e une variable grades qui contient un tableau contenant les param√®tres</span>

  <span class="kd">const</span> <span class="nx">avgGrade</span> <span class="o">=</span> <span class="nx">grades</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">curr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">curr</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">/</span> <span class="nx">grades</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="c1">// calculer la note moyenne √† partir des notes</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="nx">firstName</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="nx">lastName</span><span class="p">,</span>
    <span class="na">grades</span><span class="p">:</span> <span class="nx">grades</span><span class="p">,</span>
    <span class="na">avgGrade</span><span class="p">:</span> <span class="nx">avgGrade</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">student</span> <span class="o">=</span> <span class="nx">createStudent</span><span class="p">(</span><span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Anderson</span><span class="dl">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">student</span><span class="p">);</span>
<span class="c1">// {</span>
<span class="c1">//   firstName: "Nick",</span>
<span class="c1">//   lastName: "Anderson",</span>
<span class="c1">//   grades: [10, 12, 6],</span>
<span class="c1">//   avgGrade: 9,33</span>
<span class="c1">// }</span>
</code></pre></div></div>

<blockquote>
  <p><strong>Note :</strong> la fonction createStudent est mauvaise car nous ne v√©rifions pas si grades.length existe ou est diff√©rent de 0. Cependant, je n‚Äôai pas pr√©vu ce cas pour rendre l‚Äôexemple plus facile √† lire.</p>
</blockquote>

<h5 id="d√©composition-des-propri√©t√©s-dun-objet">D√©composition des propri√©t√©s d‚Äôun objet</h5>

<p>Pour celui-ci, je vous recommande de lire les explications pr√©c√©dentes concernant l‚Äôop√©rateur de reste sur les it√©rables et les param√®tres de fonction auparavant.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myObj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">a</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">b</span><span class="p">:</span> <span class="mi">4</span> <span class="p">};</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="p">...</span><span class="nx">z</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">myObj</span><span class="p">;</span> <span class="c1">// l'objet est d√©structur√© ici</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span> <span class="c1">// { a: 3, b: 4 }</span>

<span class="c1">// z est le reste de l'objet d√©structur√© : c'est myObj sans les propri√©t√©s x et y qui ont √©t√© d√©structur√©es</span>

<span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="p">...</span><span class="nx">z</span> <span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span> <span class="c1">// { x: 1, y: 2, a: 3, b: 4 }</span>

<span class="c1">// Ici, les propri√©t√©s de l'objet z sont √©tendues dans n</span>
</code></pre></div></div>

<h4 id="ressources-externes-1">Ressources externes</h4>

<ul>
  <li><a href="https://github.com/tc39/proposal-object-rest-spread">TC39 - Object rest/spread</a></li>
  <li><a href="https://github.com/wesbos/es6-articles/blob/master/28%20-%20Spread%20Operator%20Introduction.md">Spread operator introduction - WesBos</a></li>
  <li><a href="https://codeburst.io/javascript-the-spread-operator-a867a71668ca">JavaScript &amp; the spread operator</a></li>
  <li><a href="https://davidwalsh.name/spread-operator">6 Great uses of the spread operator</a></li>
</ul>

<h3 id="raccourci-pour-les-propri√©t√©s-dobjet">Raccourci pour les propri√©t√©s d‚Äôobjet</h3>

<p>Lorsque l‚Äôon assigne une variable √† la propri√©t√© d‚Äôun objet, si le nom de la variable est le m√™me que le nom de la propri√©t√©, vous pouvez faire la chose suivante :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">myObj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">x</span> <span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// 10</span>
</code></pre></div></div>

<h4 id="explication-2">Explication</h4>

<p>D‚Äôhabitude (avant ES2015), lorsque l‚Äôon d√©clare un <em>lit√©ral d‚Äôobjet</em> et que l‚Äôon veut utiliser des variables comme propri√©t√©s de l‚Äôobjet, on √©crit ce genre de code :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">myObj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">,</span> <span class="c1">// on assigne le contenu de la variable x √† myObj.x</span>
  <span class="na">y</span><span class="p">:</span> <span class="nx">y</span> <span class="c1">// on assigne le contenu de la variable y √† myObj.y</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// 10</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="c1">// 20</span>
</code></pre></div></div>

<p>Comme vous pouvez le voir, c‚Äôest assez r√©p√©titif car les noms des propri√©t√©s de myObj sont identiques aux noms des variables que vous voulez assigner √† ces propri√©t√©s.</p>

<p>Avec ES2015, quand le nom de la variable est identique au nom de la propri√©t√©, vous pouvez utiliser ce raccourci :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">myObj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">x</span><span class="p">,</span>
  <span class="nx">y</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// 10</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myObj</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span> <span class="c1">// 20</span>
</code></pre></div></div>

<h4 id="ressources-externes-2">Ressources externes</h4>

<ul>
  <li><a href="http://es6-features.org/#PropertyShorthand">Property shorthand - ES6 Features</a></li>
</ul>

<h3 id="promesses">Promesses</h3>

<p>Une promesse est un objet qui peut √™tre retourn√© de mani√®re synchrone depuis une fonction asynchrone (<a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261#3cd0">ref</a>).</p>

<p>Les promesses peuvent √™tre utilis√©es pour √©viter un <a href="http://callbackhell.com/">enfer de callbacks</a>, et elles sont rencontr√©es de plus en plus fr√©quemment dans les projets JavaScript modernes.</p>

<h4 id="code-dexemple-4">Code d‚Äôexemple</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fetchingPosts</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/posts</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="nx">posts</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">(</span><span class="nx">posts</span><span class="p">))</span>
    <span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">rej</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
<span class="p">});</span>

<span class="nx">fetchingPosts</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">posts</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">posts</span><span class="p">))</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div>

<h4 id="explication-3">Explication</h4>

<p>Quand vous faites une <em>requ√™te AJAX</em>, la r√©ponse n‚Äôest pas synchrone car vous voulez une ressource qui prend du temps √† venir. Elle ne pourriat m√™me jamais arriver si la ressource que vous avez demand√©e est indisponible pour une raison quelconque (404).</p>

<p>Pour g√©rer ce type de situations, ES2015 nous a offert les <em>promesses</em>. Les promesses peuvent avoir trois √©tats diff√©rents :</p>

<ul>
  <li>En attente</li>
  <li>Compl√©t√©</li>
  <li>Rejet√©</li>
</ul>

<p>Imagions que nous voulions utiliser les promesses pour g√©rer une requ√™te AJAX pour r√©cup√©rer la ressource <em>X</em>.</p>

<h5 id="cr√©er-la-promesse">Cr√©er la promesse</h5>

<p>Nous allons commencer par cr√©√©er une promesse. Nous allons utiliser la m√©thode <code class="highlighter-rouge">$.get()</code> de jQuery pour faire notre requ√™te AJAX vers <em>X</em>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">xFetcherPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span> <span class="c1">// Cr√©er une promesse avec le mot-cl√© new et la stocker dans une variable</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Le constructeur de Promise prend une fonction comme param√®tre qui a elle-m√™me deux param√®tres, resolve et reject</span>
    <span class="nx">$</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">X</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// D√©marrer la requ√™te AJAX</span>
      <span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">X</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Quand la requ√™te est termin√©e...</span>
        <span class="nx">resolve</span><span class="p">(</span><span class="nx">X</span><span class="p">);</span> <span class="c1">// ...r√©soudre la promesse avec la valeur X comme param√®tre</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Si la requ√™te a √©chou√©...</span>
        <span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span> <span class="c1">// ...rejeter la promesse avec l'erreur comme param√®tre</span>
      <span class="p">});</span>
  <span class="p">}</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Comme vu dans l‚Äôexemple ci-dessus, l‚Äôobjet Promise prend une fonction <em>ex√©cuteur</em> qui prend les deux param√®tres <strong>resolve</strong> et <strong>reject</strong>. Ces param√®tres sont des fonctions qui lorsqu‚Äôelles sont appel√©es, vont modifier l‚Äô√©tat de la promesse d‚Äô<em>en attente</em> √† respectivement l‚Äô√©tat <em>compl√©t√©</em> et <em>r√©solu</em>.</p>

<p>La promesse est dans l‚Äô√©tat <em>en attente</em> √† sa cr√©ation et sa fonction <em>√©x√©cuteur</em> est appel√©e imm√©diatement. Quand une des deux fonctions <em>resolve</em> ou <em>reject</em> est appel√©e depuis la fonction <em>√©x√©cuteur</em>, la promesse appelera les d√©clencheurs associ√©s.</p>

<h5 id="utilisation-des-d√©clencheurs-de-promesse">Utilisation des d√©clencheurs de promesse</h5>

<p>Pour obtenir le r√©sultat (ou l‚Äôerreur) de la promesse, nous devons y attacher des d√©clencheurs en faisant la chose suivante :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">xFetcherPromise</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">X</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">X</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
  <span class="p">})</span>
</code></pre></div></div>

<p>Si la promesse r√©ussit, <code class="highlighter-rouge">resolve()</code> sera ex√©cut√© et la fonction pass√©e √† <code class="highlighter-rouge">.then</code> est appel√©e.</p>

<p>Si elle √©choue, <code class="highlighter-rouge">reject()</code> sera ex√©cut√© et la fonction pass√©e √† <code class="highlighter-rouge">.catch</code> est appel√©e.</p>

<blockquote>
  <p>**Note : ** Si la promesse a d√©j√† √©t√© accomplie ou rejet√©e lorsqu‚Äôun d√©clencheur y est attach√©, le d√©clencheur sera appel√©, afin de ne pas avoir une course entre une op√©ration asynchrone se compl√©tant et ses d√©clencheurs s‚Äôy faisant attacher <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Promise#Description">(r√©f√©rence: MDN)</a>.</p>
</blockquote>

<h4 id="ressources-externes-3">Ressources externes</h4>

<ul>
  <li><a href="https://scotch.io/tutorials/javascript-promises-for-dummies">JavaScript Promises for dummies - Jecelyn Yeen</a></li>
  <li><a href="https://davidwalsh.name/promises">JavaScript Promise API - David Walsh</a></li>
  <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Utiliser_les_promesses">Utiliser les promesses - MDN</a></li>
  <li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261">What is a promise - Eric Elliott</a></li>
  <li><a href="https://developers.google.com/web/fundamentals/getting-started/primers/promises">JavaScript Promises: an Introduction - Jake Archibald</a></li>
  <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Promise">Documentation sur l‚Äôobjet Promise - MDN</a></li>
</ul>

<h3 id="litt√©raux-de-mod√®le">Litt√©raux de mod√®le</h3>

<p>Les litt√©raux de mod√®le (<em>template literals</em>) sont une <a href="https://en.wikipedia.org/wiki/String_interpolation"><em>interpolation d‚Äôexpression</em></a> pour les cha√Ænes de caract√®re d‚Äôune ligne ou multilignes.</p>

<p>Autrement dit, c‚Äôest une nouvelle syntaxe de cha√Æne de caract√®re qui est particuli√®rement pratique pour y utiliser des expressions JavaScript (des variables, par exemple).</p>

<h4 id="code-dexemple-5">Code d‚Äôexemple</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Nick</span><span class="dl">"</span><span class="p">;</span>
<span class="s2">`Bonjour </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">, l'expression suivante vaut 4 : </span><span class="p">${</span><span class="mi">2</span><span class="o">+</span><span class="mi">2</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>

<span class="c1">// Bonjour Nick, l'expression suivante vaut 4 : 4</span>
</code></pre></div></div>

<h4 id="ressources-externes-4">Ressources externes</h4>

<ul>
  <li><a href="http://es6-features.org/#StringInterpolation">String interpolation - ES6 Features</a></li>
  <li><a href="https://developers.google.com/web/updates/2015/01/ES6-Template-Strings">ES6 Template Strings - Addy Osmani</a></li>
</ul>

<h3 id="litt√©raux-de-mod√®le-√©tiquet√©s">Litt√©raux de mod√®le √©tiquet√©s</h3>

<p>Les √©tiquettes de mod√®le sont des <em>fonctions qui peuvent √™tre pr√©fix√©es √† un <a href="#litteraux-de-modele">litt√©ral de mod√®le</a></em>.  Quand une fonction est appel√©e ainsi, le premier param√®tre est un tableau des <em>cha√Ænes de caract√®re</em> qui apparaissent entre les variables interpol√©es du mod√®le, et les param√®tres suivants sont les valeurs interpol√©es. Vous pouuvez utiliser l‚Äôop√©rateur de d√©composition <code class="highlighter-rouge">...</code> pour les r√©cup√©rer. <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits#Les_litt√©raux_de_mod√®le_√©tiquet√©s">(R√©f√©rences: MDN)</a>.</p>

<blockquote>
  <p><strong>Note :</strong> Certaines librairies, comme <a href="https://www.styled-components.com/">styled-components</a>, se basent enti√®rement sur cette fonctionnalit√©.</p>
</blockquote>

<p>Voici un petit exemple de leur fonctionnement :</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">highlight</span><span class="p">(</span><span class="nx">strings</span><span class="p">,</span> <span class="p">...</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">interpolation</span> <span class="o">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">current</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">current</span> <span class="o">+</span> <span class="p">(</span><span class="nx">values</span><span class="p">.</span><span class="nx">length</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">&lt;mark&gt;</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">values</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/mark&gt;</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">""</span><span class="p">);</span>
  <span class="p">},</span> <span class="dl">""</span><span class="p">);</span>

  <span class="k">return</span> <span class="nx">interpolation</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">condiment</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">confiture</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">meal</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">toast</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">highlight</span><span class="s2">`J'aime mettre de la </span><span class="p">${</span><span class="nx">condiment</span><span class="p">}</span><span class="s2"> sur mon </span><span class="p">${</span><span class="nx">meal</span><span class="p">}</span><span class="s2">.`</span><span class="p">;</span>
<span class="c1">// "J'aime mettre de la &lt;mark&gt;confiture&lt;/mark&gt; sur mon &lt;mark&gt;toast&lt;/mark&gt;."</span>
</code></pre></div></div>

<p>Un autre exemple plus int√©ressant :</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">comma</span><span class="p">(</span><span class="nx">strings</span><span class="p">,</span> <span class="p">...</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">values</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="o">||</span> <span class="p">[];</span>
    <span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="s2">, </span><span class="dl">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">next</span> <span class="o">+</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">},</span> <span class="dl">""</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">snacks</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">pommes</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">bananes</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">cerises</span><span class="dl">'</span><span class="p">];</span>
<span class="nx">comma</span><span class="s2">`J'aime grignoter des </span><span class="p">${</span><span class="nx">snacks</span><span class="p">}</span><span class="s2">.`</span><span class="p">;</span>
<span class="c1">// "J'aime grignoter des pommes, bananes, cerises."</span>
</code></pre></div></div>

<h4 id="ressources-externes-5">Ressources externes</h4>
<ul>
  <li><a href="http://wesbos.com/tagged-template-literals/">Wes Bos on Tagged Template Literals</a></li>
  <li><a href="https://github.com/declandewet/common-tags">Library of common template tags</a></li>
</ul>

<h3 id="imports--exports">Imports / exports</h3>

<p>Les modules ES6 sont utilis√©s pour acc√©der √† des variables et √† des fonctions explicitement export√©es depuis les modules import√©s.</p>

<p>Je vous recommande de regardes la documentation sur MDN concernant import/export (voir les ressources externes plus bas), elles sont √† la fois simples et compl√®tes.</p>

<h4 id="explication-avec-un-code-dexemple">Explication avec un code d‚Äôexemple</h4>

<h5 id="exports-nomm√©s">Exports nomm√©s</h5>

<p>Les exports nomm√©s sont utilis√©s pour exporter plusieurs valeurs d‚Äôun module.</p>

<blockquote>
  <p><strong>Note :</strong> Vous ne pouvez exporter avec un nom que des <a href="https://fr.wikipedia.org/wiki/Objet_de_premi%C3%A8re_classe">objets de premi√®re classe</a> qui ont un nom.</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// mathConstants.js</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">exp</span> <span class="o">=</span> <span class="mf">2.7</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">alpha</span> <span class="o">=</span> <span class="mf">0.35</span><span class="p">;</span>

<span class="c1">// -------------</span>

<span class="c1">// myFile.js</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">pi</span><span class="p">,</span> <span class="nx">exp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./mathConstants.js</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// Import nomm√© -- syntaxe ressemblant √† la destructuration</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">pi</span><span class="p">)</span> <span class="c1">// 3.14</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">exp</span><span class="p">)</span> <span class="c1">// 2.7</span>

<span class="c1">// -------------</span>

<span class="c1">// mySecondFile.js</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">constants</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./mathConstants.js</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// Injecter toutes les valeurs export√©es dans la variable constants</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">constants</span><span class="p">.</span><span class="nx">pi</span><span class="p">)</span> <span class="c1">// 3.14</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">constants</span><span class="p">.</span><span class="nx">exp</span><span class="p">)</span> <span class="c1">// 2.7</span>
</code></pre></div></div>

<p>Bien que les imports nomm√©s ressemblent √† une <em>destructuration</em>, ils ont une syntaxe diff√©rente et ne sont pas identiques. Ils ne supportent ni les valeurs par d√©faut ni la destructuration <em>profonde</em>.</p>

<p>De plus, vous pouvez cr√©er des alias mais la syntaxe est diff√©rente de celle utilis√©e avec la destructuration :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">foo</span> <span class="k">as</span> <span class="nx">bar</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">myFile.js</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// foo est import√© et inject√© dans une nouvelle variable bar</span>
</code></pre></div></div>

<h5 id="importexport-par-d√©faut">Import/export par d√©faut</h5>

<p>Concernant l‚Äôexport par d√©faut, il ne peut y en avoir qu‚Äôun seul par module. Un export par d√©faut peut √™tre une fonction, une classe, un objet, ou quoi que ce soit d‚Äôautre. Cette valeur est consid√©r√©e comme √©tant la valeur export√©e ‚Äúprincipale‚Äù car elle sera la plus simple √† importer.
Concerning the default export, there is only a single default export per module. A default export can be a function, a class, an object or anything else. This value is considered the ‚Äúmain‚Äù exported value since it will be the simplest to import. <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/export#Description">R√©f√©rence: MDN</a></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// coolNumber.js</span>
<span class="kd">const</span> <span class="nx">ultimateNumber</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">ultimateNumber</span><span class="p">;</span>

<span class="c1">// ------------</span>

<span class="c1">// myFile.js</span>
<span class="k">import</span> <span class="nx">number</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./coolNumber.js</span><span class="dl">'</span><span class="p">;</span>
<span class="c1">// L'export par d√©faut, peu importe son nom, est automatiquement inject√© dans la variable number</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="c1">// 42</span>
</code></pre></div></div>

<p>Exporter une fonction :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// sum.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// -------------</span>

<span class="c1">// myFile.js</span>
<span class="k">import</span> <span class="nx">sum</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./sum.js</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="c1">// 3</span>
</code></pre></div></div>

<h4 id="ressources-externes-6">Ressources externes</h4>

<ul>
  <li><a href="https://ponyfoo.com/articles/es6#modules">ES6 Modules in bulletpoints</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export">Export - MDN</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">Import - MDN</a></li>
  <li><a href="https://www.sitepoint.com/understanding-es6-modules/">Understanding ES6 Modules</a></li>
  <li><a href="https://ponyfoo.com/articles/es6-destructuring-in-depth#special-case-import-statements">Destructuring special case - import statements</a></li>
  <li><a href="https://medium.com/@kentcdodds/misunderstanding-es6-modules-upgrading-babel-tears-and-a-solution-ad2d5ab93ce0">Misunderstanding ES6 Modules - Kent C. Dodds</a></li>
  <li><a href="http://exploringjs.com/es6/ch_modules.html#sec_modules-in-javascript">Modules in JavaScript</a></li>
</ul>

<h3 id="-this-en-javascript"><a name="this_def"></a> <em>this</em> en JavaScript</h3>

<p>L‚Äôop√©rateur <em>this</em> se comporte diff√©remment que dans d‚Äôautres langages et est dans la plupart des cas d√©termin√© par la mani√®re dont une fonction est appel√©e. (<a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/L_op%C3%A9rateur_this">Ref: MDN</a>).</p>

<p>Cette notion a beaucoup de subtilit√©s et comme elle est assez complexe, je vous recommande donc fortement de lire avec attention les ressources externes ci-dessous. Par cons√©quent, je vais utiliser l‚Äôid√©e personnelle que j‚Äôai en t√™te pour d√©terminer ce qu‚Äôest <em>this</em>. J‚Äôai appris cette astuce de <a href="http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/">cet article √©crit par Yehuda Katz</a>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="c1">// Apr√®s chaque ligne, vous trouverez la valeur de *this* dans myFunc</span>

<span class="nx">myFunc</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="dl">"</span><span class="s2">myString</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// "myString" -- la valeur du premier param√®tre de .call est inject√©e dans *this*</span>

<span class="c1">// En mode non-strict</span>
<span class="nx">myFunc</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// window -- myFunc() est un sucre syntaxique pour myFunc.call(window, "hello")</span>

<span class="c1">// En mode strict</span>
<span class="nx">myFunc</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// undefined -- myFunc() est un sucre syntaxique pour myFunc.call(undefined, "hello")</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">myFunc</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="p">}</span>

<span class="nx">person</span><span class="p">.</span><span class="nx">myFunc</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// objet person -- le premier param√®tre de call est inject√© dans *this*</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">myFunc</span><span class="p">(</span><span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// objet person -- person.myFunc() est un sucre syntaxique pour person.myFunc.call(person, "test")</span>

<span class="kd">var</span> <span class="nx">myBoundFunc</span> <span class="o">=</span> <span class="nx">person</span><span class="p">.</span><span class="nx">myFunc</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// Cr√©√©e une nouvelle fonction dans laquelle nous injectons ‚Äúhello‚Äù comme valeur de *this*</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">myFunc</span><span class="p">(</span><span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// objet Person -- La m√©thode bind n‚Äôa aucun effet sur la m√©thode originale</span>
<span class="nx">myBoundFunc</span><span class="p">(</span><span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// "hello" -- myBoundFunc est person.myFunc avec ‚Äúhello‚Äù comme valeur de *this*</span>
</code></pre></div></div>

<h4 id="ressources-externes-7">Ressources externes</h4>

<ul>
  <li><a href="http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/">Understanding JavaScript Function Invocation and ‚Äúthis‚Äù - Yehuda Katz</a></li>
  <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op√©rateurs/L_op√©rateur_this">L‚Äôop√©rateur this - MDN</a></li>
</ul>

<h3 id="classe">Classe</h3>

<p>JavaScript est un language <a href="https://fr.wikipedia.org/wiki/Programmation_orient√©e_prototype">bas√© sur les prototypes</a> (alors que Java, par exemple, est <a href="(https://en.wikipedia.org/wiki/Prototype-based_programming)">bas√© sur les classes</a>). ES6 a introduit les classes JavaScript qui sont un sucre syntaxique pour de l‚Äôh√©ritage et <strong>non</strong> un nouveau mod√®le d‚Äôh√©ritage bas√© sur des classes</p>

<p>JavaScript is a <a href="https://en.wikipedia.org/wiki/Prototype-based_programming">prototype-based</a> language (whereas Java is <a href="https://en.wikipedia.org/wiki/Class-based_programming">class-based</a> language, for instance). ES6 has introduced JavaScript classes which are meant to be a syntactic sugar for prototype-based inheritance and <strong>not</strong> a new class-based inheritance model (<a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Classes">r√©f√©rence : MDN</a>).</p>

<p>Le mot <em>classe</em> est √©videmment source de confusion si vous √™tes habitu√© aux classes dans d‚Äôautres langages. Dans ce cas, √©vitez de penser que les classes JavaScript fonctionnent de la m√™me mani√®re et consid√©rez-les comme une notion totalement diff√©rente.</p>

<p>Comme ce document n‚Äôest pas fait pour vous apprendre le langage √† partir de z√©ro, je vais partir du fait que vous savez d√©j√† ce que sont les prototypes et comment ils se comportement. Dans le cas contraire, voyez les ressources externes list√©es en dessous des exemples.</p>

<h4 id="exemples">Exemples</h4>

<p>Avant ES6, la syntaxe de prototype :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">stringSentence</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">Hello, my name is </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> and I'm </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Avec la syntaxe ES6 de classe :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">stringSentence</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">Hello, my name is </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> and I'm </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">myPerson</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">"</span><span class="s2">Manu</span><span class="dl">"</span><span class="p">,</span> <span class="mi">23</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myPerson</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span> <span class="c1">// 23</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myPerson</span><span class="p">.</span><span class="nx">stringSentence</span><span class="p">())</span> <span class="c1">// "Hello, my name is Manu and I'm 23</span>
</code></pre></div></div>

<h4 id="ressources-externes-8">Ressources externes</h4>

<p>Pour comprendre les prototypes :</p>

<ul>
  <li><a href="http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/">Understanding Prototypes in JS - Yehuda Katz</a></li>
  <li><a href="http://sporto.github.io/blog/2013/02/22/a-plain-english-guide-to-javascript-prototypes/">A plain English guide to JS prototypes - Sebastian Porto</a></li>
  <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/H√©ritage_et_cha√Æne_de_prototypes">H√©ritage et cha√Æne de prototypes - MDN</a></li>
</ul>

<p>Pour comprendre les classes</p>

<ul>
  <li><a href="https://ponyfoo.com/articles/es6-classes-in-depth">ES6 Classes in Depth - Nicolas Bevacqua</a></li>
  <li><a href="http://es6-features.org/#ClassDefinition">ES6 Features - Classes</a></li>
  <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Classes">Classes - MDN</a></li>
</ul>

<h3 id="mots-cl√©s-extends-et-super">Mots cl√©s <code class="highlighter-rouge">extends</code> et <code class="highlighter-rouge">super</code></h3>

<p>Le mot-cl√© <code class="highlighter-rouge">extends</code> est utilis√© dans les d√©clarations de classe ou les expressions de classe pour cr√©er une classe qui est une fille d‚Äôune autre classe (<a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Classes/extends">r√©f√©rence: MDN</a>). La sous-classe h√©rite de toutes les propri√©t√©s de la classe sup√©rieure et peut aussi ajouter de nouvelles propri√©t√©s ou modifier celles h√©rit√©es.</p>

<p>Le mot-cl√© <code class="highlighter-rouge">super</code> est utilis√© pour appeler des fonctions sur le parent d‚Äôun objet, y compris son constructeur.</p>

<ul>
  <li>Le mot-cl√© <code class="highlighter-rouge">super</code> doit √™tre utilis√© avant que le mot-cl√© <code class="highlighter-rouge">this</code> soit utilis√© dans le constructeur</li>
  <li>Invoquer <code class="highlighter-rouge">super()</code> appelle le constructeur de la classe parente. Si vous voulez passer des arguments au constructeur de la classe parente, vous pouvez l‚Äôappeler avec <code class="highlighter-rouge">super(arguments)</code>.</li>
  <li>Si la classe parente a une m√©thode (m√™me statique) appel√©e <code class="highlighter-rouge">X</code>, vous pouvez utiliser <code class="highlighter-rouge">super.X()</code> pour l‚Äôappeler depuis la classe fille.</li>
</ul>

<h4 id="code-dexemple-6">Code d‚Äôexemple</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Polygon</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">height</span><span class="p">,</span> <span class="nx">width</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Polygon</span><span class="dl">'</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">width</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">getHelloPhrase</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`Hi, I am a </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Square</span> <span class="kd">extends</span> <span class="nx">Polygon</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Ici, le constructeur de la classe parente est appel√© avec</span>
    <span class="c1">// les longueurs donn√©es pour la hauteur et largeur du Polygon</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">length</span><span class="p">,</span> <span class="nx">length</span><span class="p">);</span>
    <span class="c1">// Note : dans les classes d√©riv√©es, super() doit √™tre appel√© avant que vous ne</span>
    <span class="c1">// puissiez utiliser 'this'. Ne pas respecter cette r√®gle causera une ReferenceError.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Square</span><span class="dl">'</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="nx">length</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">getCustomHelloPhrase</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">polygonPhrase</span> <span class="o">=</span> <span class="k">super</span><span class="p">.</span><span class="nx">getHelloPhrase</span><span class="p">();</span> <span class="c1">// acc√©der √† une m√©thode de la classe parente avec la syntaxe super.X()</span>
    <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="nx">polygonPhrase</span><span class="p">}</span><span class="s2"> with a length of </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">get</span> <span class="nx">area</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">mySquare</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Square</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mySquare</span><span class="p">.</span><span class="nx">area</span><span class="p">)</span> <span class="c1">// 100</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mySquare</span><span class="p">.</span><span class="nx">getHelloPhrase</span><span class="p">())</span> <span class="c1">// 'Hi, I am a Square' -- Square h√©rite de Polygon et a acc√®s √† ses m√©thodes</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mySquare</span><span class="p">.</span><span class="nx">getCustomHelloPhrase</span><span class="p">())</span> <span class="c1">// 'Hi, I am a Square with a length of 10'</span>
</code></pre></div></div>

<p><strong>Note :</strong> Si nous avions essay√© d‚Äôutiliser <code class="highlighter-rouge">this</code>avant d‚Äôappeler <code class="highlighter-rouge">super()</code> dans la classe Square, une ReferenceError aurait √©t√© d√©clench√©e :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Square</span> <span class="kd">extends</span> <span class="nx">Polygon</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span> <span class="c1">// ReferenceError, super doit √™tre appel√© d‚Äôabord !</span>

    <span class="c1">// Ici, le constructeur de la classe parente est appel√© avec</span>
    <span class="c1">// les longueurs donn√©es pour la hauteur et largeur du Polygon</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">length</span><span class="p">,</span> <span class="nx">length</span><span class="p">);</span>

    <span class="c1">// Note : dans les classes d√©riv√©es, super() doit √™tre appel√© avant que vous ne</span>
    <span class="c1">// puissiez utiliser 'this'. Ne pas respecter cette r√®gle causera une ReferenceError.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Square</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="ressources">Ressources</h4>

<ul>
  <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Classes/extends">extends - MDN</a></li>
  <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op√©rateurs/super">super - MDN</a></li>
  <li><a href="https://developer.mozilla.org/fr/docs/Learn/JavaScript/Objects/Heritage">L‚Äôh√©ritage au sein de JavaScript - MDN</a></li>
</ul>

<h3 id="async-await">Async Await</h3>

<p>En plus des <a href="#promesses">Promises</a>, il y a une nouvelle syntaxe que vous pourriez rencontrer pour g√©rer le code asynchrone nomm√©e <em>async / await</em>.</p>

<p>Le but des fonctions async/await est de simplifier le comportement de l‚Äôutilisation des promesses de mani√®re synchrone et d‚Äôex√©cuter un comportemnet sur un groupe de promesses. Tout comme les promesses sont similaires aux callbacks structur√©s, asnyc/await est similaire √† la combinaison de g√©n√©rateurs et de promesses. Les fonctions asynchrones renvoient <em>toujours</em> une Promise. (<a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/async_function">r√©f√©rence: MDN</a>)</p>

<blockquote>
  <p><strong>Note :</strong> Vous devez comprendre ce que sont les promesses et comment elles fonctionnent avant d‚Äôessayer de comprendre async/await car elles d√©pendent dessus.</p>
</blockquote>

<blockquote>
  <p><strong>Note 2:</strong> <a href="https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9#f3f0"><em>await</em> doit √™tre utilis√© dans une fonction <em>async</em></a>, ce qui signifie que vous ne pouvez pas utiliser await dans le premier niveau de votre code car ce n‚Äôest pas une fonction async.</p>
</blockquote>

<h4 id="code-dexemple-7">Code d‚Äôexemple</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">getGithubUser</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// le mot-cl√© async autorise l‚Äôutilisation de await dans la fonction et signifie que la fonction retourne une promesse</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s2">`https://api.github.com/users/</span><span class="p">${</span><span class="nx">username</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// L‚Äôex√©cution est mise en pause ici jusqu‚Äô√† ce que la Promise retourn√©e par fetch soit r√©solue</span>
  <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
<span class="p">}</span>

<span class="nx">getGithubUser</span><span class="p">(</span><span class="dl">'</span><span class="s1">mbeaudru</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">))</span> <span class="c1">// afficher dans la console la r√©ponse - on ne peut pas utiliser la syntaxe await car ce code n‚Äôest pas une fonction async</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span> <span class="c1">// si notre fonction async l√®ve une erreur, nous la r√©cup√©rons ici</span>
</code></pre></div></div>

<h4 id="explication-avec-un-code-dexemple-1">Explication avec un code d‚Äôexemple</h4>

<p><em>Async / Await</em> fonctionnent avec les promises mais ils permettent d‚Äôutiliser un style de code plus imp√©ratif.</p>

<p>L‚Äôop√©rateur <em>async</em> marque une fonction comme √©tant asynchrone et retournera toujours une <em>Promise</em>. Vous pouvez utiliser l‚Äôop√©rateur <em>await</em> dans une fonction <em>async</em> pour mettre en pause l‚Äôex√©cution sur cette ligne jusqu‚Äô√† ce que la promise retourn√©e par l‚Äôexpression se fasse r√©soudre ou rejeter.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">myFunc</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// nous pouvons utiliser l‚Äôop√©rateur await car cette fonction est asynchrone</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">hello world</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">myFunc</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">msg</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">))</span> <span class="c1">// "hello world" -- la valeur de retour de myFunc se fait transformer en promesse √† cause de l‚Äôop√©rateur async</span>
</code></pre></div></div>

<p>Lorsque l‚Äôexpression <em>return</em> d‚Äôune fonction async est atteint, la Promise est remplie avec la valeur retourn√©e. Si une erreur est lev√©e √† l‚Äôint√©rieur de la fonction async, la l‚Äô√©tat de la promesse passera √† <em>rejet√©</em>. Si aucune valeur n‚Äôest retourn√©e par une fonction async, une promesse est quand m√™me retourn√©e et sera r√©solue sans valeur lorsque l‚Äôex√©cution de la fonction async est termin√©e.</p>

<p>L‚Äôop√©rateur <em>await</em> est utilis√© pour attendre qu‚Äôune primesse se fasse r√©soudre et ne peut √™tre utilis√© qu‚Äô√† l‚Äôint√©rieur du corps d‚Äôune fonction async. Lorsqu‚Äôil est rencontr√©, l‚Äôex√©cution du code est mise en pause jusqu‚Äô√† ce que la promise se fasse r√©soudre.</p>

<blockquote>
  <p><strong>Note :</strong> <em>fetch</em> est une fonction qui retourne une Promise qui nous permet de faire une requ√™te AJAX</p>
</blockquote>

<p>Voyons d‚Äôabord comment nous pourrions r√©cup√©rer un utilisateur sur GitHub avec des promesses.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getGithubUser</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="s2">`https://api.github.com/users/</span><span class="p">${</span><span class="nx">username</span><span class="p">}</span><span class="s2">`</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
<span class="p">}</span>

<span class="nx">getGithubUser</span><span class="p">(</span><span class="dl">'</span><span class="s1">mbeaudru</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">))</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div>

<p>Voici l‚Äô√©quivalent avec async/await</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">getGithubUser</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// utilisation d‚Äôune promesse + du mot-cl√© await autoris√©</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s2">`https://api.github.com/users/</span><span class="p">${</span><span class="nx">username</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// L‚Äôex√©cution s‚Äôarr√™te ici jusqu‚Äô√† ce que la promesse fetch soit r√©solue</span>
  <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
<span class="p">}</span>

<span class="nx">getGithubUser</span><span class="p">(</span><span class="dl">'</span><span class="s1">mbeaudru</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">))</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div>

<p>La syntaxe <em>async/await</em> est particuli√®rement utile lorsque vous avez besoin d‚Äôencha√Æner des promesses qui sont mutuellement d√©pendantes.</p>

<p>Par exemple, si vous avez besoin d‚Äôobtenir un jeton d‚Äôaccps pour pouvoir r√©cup√©rer un post de blog sur une base de donn√©es puis les informations sur l‚Äôauteur :</p>

<blockquote>
  <p><strong>Note :</strong> les expressions <em>await</em> ont besoin d‚Äô√™tres entour√©es de parenth√®ses pour appeler leur valeur r√©solue et leurs propri√©t√©s sur la m√™me ligne.</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">fetchPostById</span><span class="p">(</span><span class="nx">postId</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">token_url</span><span class="dl">'</span><span class="p">)).</span><span class="nx">json</span><span class="p">().</span><span class="nx">token</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">post</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s2">`/posts/</span><span class="p">${</span><span class="nx">postId</span><span class="p">}</span><span class="s2">?token=</span><span class="p">${</span><span class="nx">token</span><span class="p">}</span><span class="s2">`</span><span class="p">)).</span><span class="nx">json</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">author</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s2">`/users/</span><span class="p">${</span><span class="nx">post</span><span class="p">.</span><span class="nx">authorId</span><span class="p">}</span><span class="s2">`</span><span class="p">)).</span><span class="nx">json</span><span class="p">();</span>

  <span class="nx">post</span><span class="p">.</span><span class="nx">author</span> <span class="o">=</span> <span class="nx">author</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">post</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">fetchPostById</span><span class="p">(</span><span class="dl">'</span><span class="s1">gzIrzeo64</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">post</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">post</span><span class="p">))</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div>

<h5 id="gestion-derreur">Gestion d‚Äôerreur</h5>

<p>√Ä moins d‚Äôajouter des blocs <em>try / catch</em> autour des expressions <em>await</em>, les exceptions non g√©r√©es ‚Äì peu importe de si elles ont √©t√© lev√©es dans le corps de votre fonction <em>async</em> ou lorsque le code est en pause pendant <em>await</em> ‚Äì vont rejeter la promesse retourn√©e par la fonction <em>async</em>. Utiliser l‚Äôexpression <code class="highlighter-rouge">thrown</code> dans une fonction asynchrone donne le m√™me r√©sultat que retourner une promesse qui se fait rejeter <a href="https://ponyfoo.com/articles/understanding-javascript-async-await#error-handling">(r√©f√©rence : PonyFoo)</a>.</p>

<blockquote>
  <p><strong>Note :</strong> Les promesses se comportent de la m√™me mani√®re !</p>
</blockquote>

<p>Avec les promesses, voici comment on g√©rerait la cha√Æne d‚Äôerreur :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getUser</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// Cette promesse se fera rejeter !</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">rej</span><span class="p">(</span><span class="dl">"</span><span class="s2">Utilisateur non trouv√© !</span><span class="dl">"</span><span class="p">));</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">getAvatarByUsername</span><span class="p">(</span><span class="nx">userId</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">getUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">avatar</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">getUserAvatar</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">getAvatarByUsername</span><span class="p">(</span><span class="nx">username</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">avatar</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">avatar</span> <span class="p">}));</span>
<span class="p">}</span>

<span class="nx">getUserAvatar</span><span class="p">(</span><span class="dl">'</span><span class="s1">mbeaudru</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">))</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span> <span class="c1">// "Utilisateur non trouv√© !"</span>
</code></pre></div></div>

<p>√âquivalent avec <em>async / await</em>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">getUser</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// La promesse retourn√©e se fera rejeter</span>
  <span class="k">throw</span> <span class="dl">"</span><span class="s2">Utilisateur non trouv√© !</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">getAvatarByUsername</span><span class="p">(</span><span class="nx">userId</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nx">avatar</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nx">getUserAvatar</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">avatar</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getAvatarByUsername</span><span class="p">(</span><span class="nx">username</span><span class="p">);</span>
  <span class="k">return</span> <span class="p">{</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">avatar</span> <span class="p">};</span>
<span class="p">}</span>

<span class="nx">getUserAvatar</span><span class="p">(</span><span class="dl">'</span><span class="s1">mbeaudru</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">))</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span> <span class="c1">// "Utilisateur non trouv√© !"</span>
</code></pre></div></div>

<h4 id="ressources-externes-9">Ressources externes</h4>

<ul>
  <li><a href="https://javascript.info/async-await">Async/Await - JavaScript.Info</a></li>
  <li><a href="http://rossboucher.com/await/#/">ES7 Async/Await</a></li>
  <li><a href="https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9">6 Reasons Why JavaScript‚Äôs Async/Await Blows Promises Away</a></li>
  <li><a href="https://dev.to/kayis/javascript-awaits">JavaScript awaits</a></li>
  <li><a href="https://medium.com/@Abazhenov/using-async-await-in-express-with-node-8-b8af872c0016">Using Async Await in Express with Node 8</a></li>
  <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Statements/async_function">Async Function</a></li>
  <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Operators/await">Await</a></li>
  <li><a href="https://medium.com/@Abazhenov/using-async-await-in-express-with-node-8-b8af872c0016">Using async / await in express with node 8</a></li>
</ul>

<h3 id="v√©rit√©--fausset√©">V√©rit√© / fausset√©</h3>

<p>En JavaScript, une valeur <code class="highlighter-rouge">truthy</code> ou <code class="highlighter-rouge">falsy</code> est une valeur qui se fait caster en un bool√©en lorsqu‚Äôelle est √©valu√©e dans un contexte bool√©en. Un exemple de contexte bool√©en serait l‚Äô√©valuation d‚Äôune condition <code class="highlighter-rouge">if</code>.</p>

<p>Chaque valeur sera transform√©e en <code class="highlighter-rouge">true</code>, √† part si elles sont √©gales √† :</p>

<ul>
  <li><code class="highlighter-rouge">false</code></li>
  <li><code class="highlighter-rouge">0</code></li>
  <li><code class="highlighter-rouge">""</code> (cha√Æne de caract√®res vide)</li>
  <li><code class="highlighter-rouge">null</code></li>
  <li><code class="highlighter-rouge">undefined</code></li>
  <li><code class="highlighter-rouge">NaN</code></li>
</ul>

<p>Voici des exemples de <em>contexte bool√©en</em> :</p>

<ul>
  <li>√âvaluation de condition <code class="highlighter-rouge">if</code></li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">myVar</span><span class="p">)</span> <span class="p">{}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">myVar</code> peut √™tre n‚Äôimporte quel <a href="https://fr.wikipedia.org/wiki/Objet_de_premi%C3%A8re_classe">objets de premi√®re classe</a> (variable, fonction, bool√©en) mais il sera transform√© en bool√©en car il est √©valu√© dans un contexte bool√©en.</p>

<ul>
  <li>Apr√®s l‚Äôop√©rateur logique <strong>NOT</strong> <code class="highlighter-rouge">!</code></li>
</ul>

<p>Cet op√©rateur retourne <code class="highlighter-rouge">false</code> si son op√©rande peut √™tre converti √† <code class="highlighter-rouge">true</code> ; dans le cas contraire, il retourne <code class="highlighter-rouge">true</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">!</span><span class="mi">0</span> <span class="c1">// true -- 0 est falsy, donc retourne true</span>
<span class="o">!!</span><span class="mi">0</span> <span class="c1">// false -- 0 est falsy, donc !0 retourne true, et donc !(!0) retourne false</span>
<span class="o">!!</span><span class="dl">""</span> <span class="c1">// false -- une cha√Æne vide est falsy donc NOT (NOT false) est √©gal √† false</span>
</code></pre></div></div>

<ul>
  <li>Avec le constructeur d‚Äôobjet <em>Boolean</em></li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// false</span>
<span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// true</span>
</code></pre></div></div>

<ul>
  <li>Dans une expression ternaire</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">myVar</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">truthy</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">falsy</span><span class="dl">"</span>
</code></pre></div></div>

<p>myVar se fait √©valuer dans un contexte bool√©en.</p>

<h4 id="ressources-externes-10">Ressources externes</h4>

<ul>
  <li><a href="https://developer.mozilla.org/fr/docs/Glossary/Truthy">Truthy (MDN)</a></li>
  <li><a href="https://developer.mozilla.org/fr/docs/Glossary/Falsy">Falsy (MDN)</a></li>
  <li><a href="http://adripofjavascript.com/blog/drips/truthy-and-falsy-values-in-javascript.html">Truthy and Falsy values in JS - Josh Clanton</a></li>
</ul>

<h3 id="m√©thodes-statiques">M√©thodes statiques</h3>

<h4 id="explication-courte">Explication courte</h4>

<p>Le mot-cl√© <code class="highlighter-rouge">static</code> est utilis√© dans les classes pour d√©clarer des m√©thodes statiques. Les m√©thodes statiques sont des fonctions dans une classe qui appartiennent √† l‚Äôobjet classe et ne sont pas disponible dans les instances de la classe.</p>

<h4 id="code-dexemple-8">Code d‚Äôexemple</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Repo</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">Le nom du repo est modern-js-cheatsheet</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Notez que nous n‚Äôavons pas cr√©√© d‚Äôinstance de la classe Repo</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Repo</span><span class="p">.</span><span class="nx">getName</span><span class="p">())</span> <span class="c1">// "Le nom du repo est modern-js-cheatsheet"</span>

<span class="kd">let</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Repo</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">getName</span><span class="p">())</span> <span class="c1">// Uncaught TypeError: repo.getName is not a function</span>
</code></pre></div></div>

<h4 id="explication-d√©taill√©e-2">Explication d√©taill√©e</h4>

<p>Les m√©thodes statiques peuvent √™tre appel√©es √† l‚Äôint√©rieur d‚Äôune autre m√©thode statique en utilisant le mot-cl√© <code class="highlighter-rouge">this</code>. Ceci ne fonctionne pas avec les m√©thodes non statiques, qui ne peuvent pas y acc√©der directement en utilisant le mot-cl√© <code class="highlighter-rouge">this</code>.</p>

<h5 id="appeler-dautres-m√©thodes-statiques-depuis-une-m√©thode-statique">Appeler d‚Äôautres m√©thodes statiques depuis une m√©thode statique</h5>

<p>Pour appeler une m√©thode statique depuis une autre m√©thode statique, le mot-cl√© <code class="highlighter-rouge">this</code> peut √™tre utilis√© comme ceci :</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Repo</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">Le nom du repo est modern-js-cheatsheet</span><span class="dl">"</span>
  <span class="p">}</span>

  <span class="kd">static</span> <span class="nx">modifyName</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">-ajout</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Repo</span><span class="p">.</span><span class="nx">modifyName</span><span class="p">())</span> <span class="c1">// Le nom du repo est modern-js-cheatsheet-ajout</span>
</code></pre></div></div>

<h5 id="appeler-des-m√©thodes-statiques-depuis-des-m√©thodes-non-statiques">Appeler des m√©thodes statiques depuis des m√©thodes non statiques</h5>

<p>Les m√©thodes non statiques peuvent appeler des m√©thodes statiques de deux fa√ßons :</p>
<ol>
  <li>
    <h6 id="en-utilisant-le-nom-de-la-classe">En utilisant le nom de la classe</h6>
  </li>
</ol>

<p>Pour acc√©der √† une m√©thode statique depuis une m√©thode non statique, nous pouvons utiliser le nom de la classe et appeler la m√©thode statique comme une propri√©t√©, par exemple <code class="highlighter-rouge">NomClasse.NomMethodeStatique()</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Repo</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">Le nom du repo est modern-js-cheatsheet</span><span class="dl">"</span>
  <span class="p">}</span>

  <span class="nx">useName</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">Repo</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> et il contient des trucs vraiment importants</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Nous devons instancier la classe pour utiliser les m√©thodes non statiques</span>
<span class="kd">let</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Repo</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">useName</span><span class="p">())</span> <span class="c1">// Le nom du repo est modern-js-cheatsheet et il contient des trucs vraiment importants</span>
</code></pre></div></div>

<ol>
  <li>
    <h6 id="avec-le-constructeur">Avec le constructeur</h6>
  </li>
</ol>

<p>Les m√©thodes statiques peuvent √™tre appel√©es en tant que propri√©t√©s sur l‚Äôobjet constructor</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Repo</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">Repo name is modern-js-cheatsheet</span><span class="dl">"</span>
  <span class="p">}</span>

  <span class="nx">useName</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Appelle la m√©thode statique comme une propri√©t√© du constructeur</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="kd">constructor</span><span class="p">.</span><span class="nx">getName</span><span class="p">()</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> et il contient des trucs vraiment importants</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Nous devons instancier la classe pour utiliser les m√©thodes non statiques</span>
<span class="kd">let</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Repo</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">useName</span><span class="p">())</span> <span class="c1">// Le nom du repo est modern-js-cheatsheet et il contient des trucs vraiment importants</span>
</code></pre></div></div>

<h4 id="ressources-externes-11">Ressources externes</h4>
<ul>
  <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Classes/static">static - MDN</a></li>
  <li><a href="https://javascript.info/class#static-methods">Static Methods - Javascript.info</a></li>
  <li><a href="http://odetocode.com/blogs/scott/archive/2015/02/02/static-members-in-es6.aspx">Static Members in ES6 - OdeToCode</a></li>
</ul>

<h2 id="glossaire">Glossaire</h2>

<h3 id="-port√©e-scope"><a name="scope_def"></a> Port√©e (<em>scope</em>)</h3>

<p>Le contexte dans lequel les valeurs et expressions sont ‚Äúvisibles‚Äù, ou peuvent √™tre r√©f√©renc√©es. Si une variable ou une autre expression n‚Äôest pas ‚Äúdans la port√©e actuelle‚Äù, alors son utilisation ne sera pas possible.</p>

<p>Source : <a href="https://developer.mozilla.org/fr/docs/Glossaire/Port√©e">MDN</a></p>

<h3 id="-mutation-de-variable"><a name="mutation_def"></a> Mutation de variable</h3>

<p>On dit d‚Äôune variable qu‚Äôelle a √©t√© <em>mut√©e</em> lorsque sa valeur initiale a √©t√© chang√©e apr√®s coup.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[];</span>
<span class="nx">myArray</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">firstEl</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// myArray s‚Äôest fait muter</span>
</code></pre></div></div>

<p>Une variable est dite <em>immutable</em> si elle ne peut √™tre mut√©e.</p>

<p>Vous pouvez lire <a href="https://developer.mozilla.org/fr/docs/Glossary/Mutable">l‚Äôarticle Mutable de MDN</a> pour plus de d√©tails.</p>
:ET