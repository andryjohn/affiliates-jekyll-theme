I"ŞG<blockquote>
  <p>Cette introduction a pour objectif de <em>dÃ©diabolisÃ©</em> le code en vous prÃ©sentant le fonctionnement et les possibilitÃ©s offertes par ce langage, evidemment accessible Ã  tous et pourra Ãªtre bÃ©nÃ©fique Ã  chacun, que vous nâ€™ayez jamais codÃ© ou si vous Ã¨tes un expert, cela va vous permettre de rÃ©visÃ© les bases.</p>
</blockquote>

<h2 id="quest-ce-ce-que-le-javascript">Quâ€™est-ce ce que le JavaScript?</h2>

<p>Le <strong>JavaScript</strong> est un langage de programmation plutot jeune crÃ©Ã© en 1995. Il va nous permettre de crÃ©er des pages interactives et Â« vivantes Â» Ã  lâ€™aide de <strong>scripts.</strong></p>

<blockquote>
  <p>Un <strong>script</strong>, câ€™est tout simplement une suite dâ€™instructions qui vont Ãªtre interprÃ©tÃ©es par un programme.</p>
</blockquote>

<p>Ainsi, pour lire du code JavaScript, il va nous falloir un interprÃ©teur. Heureusement, tous les navigateurs (Google Chrome, Safari, etc.) possÃ¨dent leur propre interprÃ©teur JavaScript.</p>

<blockquote>
  <p>Le <strong>JavaScript</strong> est un langage de programmation dit Â« client-side Â», câ€™est Ã  dire que me code va sâ€™effectuer du cÃ´tÃ© du client, câ€™est-Ã -dire sur lâ€™ordinateur de la personne qui va demander la page web.</p>
</blockquote>

<h1 id="environnement-de-travail">Environnement de travail:</h1>

<h3 id="choisir-et-utiliser-un-Ã©diteur-de-texte">Choisir et utiliser un Ã©diteur de texte:</h3>

<p>Pour coder en JavaScript, les dÃ©veloppeurs ont besoin dâ€™un <strong>Ã©diteur de texte.</strong> Moi jâ€™utilise <em>Sublime text</em> mais il existe de nombreux Ã©diteurs de texte sur le web et <em>la majoritÃ© dâ€™entre eux sont gratuits.</em>
<img src="/images/sublime.png" alt="sublime" /></p>

<p>Vous pourrez Ã©galement trouver sur le web de nombreux sites web vous permettant dâ€™Ã©crire du code en JavaScript et dâ€™avoir immÃ©diatement un aperÃ§u du rÃ©sultat. Je vous recommande
<a href="https://jsfiddle.net/">jsfiddle.net</a> ou <a href="https://jsbin.com/?html,output">jsbin.com</a>.</p>

<h3 id="ou-Ã©crire-notre-code-javascript">Ou Ã©crire notre code JavaScript?</h3>

<p>On va pouvoir placer du code JavaScript Ã  trois endroits diffÃ©rents :</p>

<ul>
  <li>Dans lâ€™Ã©lÃ©ment <code class="highlighter-rouge">head</code> dâ€™une page HTML ;</li>
  <li>Dans lâ€™Ã©lÃ©ment <code class="highlighter-rouge">body</code> dâ€™une page HTML ;</li>
  <li>Dans un fichier portant lâ€™extension Â« .js Â» sÃ©parÃ©.</li>
</ul>

<blockquote>
  <p>Bien que cette derniÃ¨re mÃ©thode soit gÃ©nÃ©ralement recommandÃ©e, notamment pour des gros projets, parfois vous serez Â« obligÃ© Â» dâ€™Ã©crire votre code JavaScript dans votre fichier HTML.</p>
</blockquote>

<h1 id="les-variables-en-javascript">Les variables en JavaScript:</h1>

<p>Une <strong>variable JavaScript</strong> est un conteneur servant Ã  <strong>stocker temporairement une information</strong>, comme un nombre ou une chaÃ®ne de caractÃ¨res (câ€™est-Ã -dire un texte) par exemple, ici câ€™est <strong>firstName</strong>.</p>

<p><img src="/images/var2.png" alt="var" /></p>

<p>On a la possiblitÃ© de dÃ©clarer une variable avec <code class="highlighter-rouge">let</code> et <code class="highlighter-rouge">const</code>.</p>

<p>Comme son nom lâ€™indique, le propre dâ€™une <em>variable</em> est de pouvoir varier, câ€™est-Ã -dire de pouvoir stocker (tel une boite)
<em>diffÃ©rentes valeurs dans le temps, en Â« Ã©crasant Â» sa valeur prÃ©cÃ©dente.</em></p>

<blockquote>
  <p>Dans beaucoup de dÃ©monstrations JavaScript, vous pourrez croiser le mot-clÃ©  <code class="highlighter-rouge">var</code>  plutÃ´t que  <code class="highlighter-rouge">let</code>. Bien quâ€™il y ait une diffÃ©rence subtile entre les deux (que nous dÃ©taillerons dans le chapitre sur la portÃ©e), pour lâ€™instant vous pouvez simplement voir  <code class="highlighter-rouge">var</code>  comme lâ€™ancienne version de  <code class="highlighter-rouge">let</code> : câ€™est une autre faÃ§on de crÃ©er une variable.</p>
</blockquote>

<h3 id="dÃ©clarer-une-variable-en-javascript">DÃ©clarer une variable en JavaScript</h3>

<p>Il existe diffÃ©rentes faÃ§ons de dÃ©clarer une variable en JavaScript. On va pouvoir :</p>

<ul>
  <li>DÃ©clarer une variable et lui assigner une valeur immÃ©diatement ;</li>
  <li>DÃ©clarer une variable sans lui assigner de valeur et lui assigner une valeur plus tard ;</li>
  <li>DÃ©clarer plusieurs variables en mÃªme temps.</li>
</ul>

<p>Voyons immÃ©diatement un premier exemple ensemble :</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">//On declare une variable et lui assigner une valeur immÃ©diatement ;</span>
<span class="kd">let</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">png</span> <span class="o">=</span> <span class="mi">45</span><span class="p">;</span>

<span class="c1">//On declare une variable sans lui assigner de valeur et lui assigner une valeur ensuite(non recommandÃ©e) ;</span>
<span class="kd">let</span> <span class="nx">age</span><span class="p">;</span>
<span class="nx">age</span> <span class="o">=</span> <span class="mi">25</span>

<span class="c1">// On crÃ©e une variable vide  Ã  laquelle on affecte une valeur ar la suite (meilleur option)</span>
<span class="kd">let</span> <span class="nx">city</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
<span class="nx">city</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Paris</span><span class="dl">"</span>

<span class="c1">// une variable stockant un type particulier: un boolÃ©an</span>
<span class="kd">const</span> <span class="nx">man</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

</code></pre></div></div>
<p><strong>Remarque: les types de valeurs et le signe Â« = Â»</strong></p>

<p>La premiÃ¨re concerne les valeurs stockÃ©es par <em>les variables.</em> Vous pouvez remarquer que selon le <em>type de valeur stockÃ©e</em>(texte, nombre ou boolÃ©en), nous allons dÃ©clarer nos variables de faÃ§on sensiblement diffÃ©rente (utilisation ou non de guillemets ou dâ€™apostrophes). Nous allons y revenir..</p>

<p>La deuxiÃ¨me remarque concerne <strong>le signe Â« = Â» (signe Ã©gal).</strong></p>

<p>Faites trÃ¨s attention Ã  la signification de ce signe en JavaScript et en programmation en gÃ©nÃ©ral, car ce nâ€™est pas le Ã©gal mathÃ©matique que vous connaissez.</p>

<blockquote>
  <p>En effet, en JavaScript, le signe Ã©gal est un opÃ©rateur dâ€™affectation et non pas dâ€™Ã©galitÃ©.</p>
</blockquote>

<p>Cela veut dire que ce signe va nous servir Ã 
<strong>affecter (ou assigner) une valeur Ã  une variable, mais non pas que la variable est Ã©gale Ã  sa valeur.</strong></p>

<p>Pour vous donner un exemple concret, en JavaScript, nous allons pouvoir faire cela (ce qui nâ€™aurait aucun sens en mathÃ©matiques) :</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// On stock la valeur 15 a notre variable x</span>
<span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>

<span class="cm">/*On ajoute 5 Ã  la derniÃ¨re valeur connue stockÃ©e par x;
*x stocke donc maitenant la valeur 30*/</span>
<span class="nx">num</span> <span class="o">=</span> <span class="nx">num</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>

<span class="c1">// En math, la reponse serait "l'ensemble des solution est nulles"</span>
</code></pre></div></div>
<h1 id="les-types-de-valeurs-des-variables">Les types de valeurs des variables</h1>
<p><img src="/images/Data.png" alt="var" /></p>

<p>Les variables en JavaScript peuvent stocker
<em>diffÃ©rents types de valeurs.</em></p>

<p>Par simplification, on parlera <strong>souvent (Ã  tort) de Â« types de variables Â» au lieu de parler de Â« types de valeurs stockÃ©es par les variables Â».</strong></p>

<hr />
<h3 id="le-type-de-valeurs-numbers">Le type de valeurs Numbers:</h3>

<p><img src="/images/numbers.png" alt="numbers" /></p>

<p>Le type de valeurs Number va reprÃ©senter <strong>tout nombre ou chiffre, quâ€™il soit positif, nÃ©gatif, entier ou Ã  virgule.</strong></p>

<p><em>Pour affecter une valeur de type Number Ã  une variable, on nâ€™utilise ni guillemet ni apostrophe.</em></p>

<h3 id="le-type-de-valeurs-string">Le type de valeurs String:</h3>

<p>Le type de valeurs <strong>String</strong> va reprÃ©senter les chaÃ®nes de caractÃ¨res, câ€™est-Ã -dire les textes.</p>

<p>Si lâ€™on veut stocker <em>une chaÃ®ne de caractÃ¨res dans une variable, il faut entourer notre chaÃ®ne par des apostrophes ou des guillemets.</em></p>

<blockquote>
  <p>Ce sont justement ces apostrophes ou guillemets qui vont indiquer au JavaScript que lâ€™on stocke une valeur de type String.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">var</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Andry</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">Name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">gender</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Male</span><span class="dl">"</span>

</code></pre></div></div>
<h3 id="le-type-de-valeurs-boolean">Le type de valeurs Boolean</h3>

<p>Une variable en JavaScript peut encore stocker une valer de type <strong>Boolean</strong>, <em>câ€™est-Ã -dire un boolÃ©en.</em></p>

<p><img src="/images/boolean.png" alt="boolean" /></p>

<p>Une variable en JavaScript peut encore stocker une valer de type <strong>Boolean</strong>, <em>câ€™est-Ã -dire un boolÃ©en.</em></p>

<p>Un boolÃ©en, en algÃ¨bre, est <em>une valeur binaire (soit 0, soit 1). En informatique, un boolÃ©en va Ãªtre soit la valeur true (vrai), soit la valeur false (faux).</em></p>

<blockquote>
  <p>Faites bien attention : pour quâ€™une variable stocke bien un boolÃ©en, il faut lui faire stocker la valeur true ou false, sans guillemets ou apostrophes.</p>
</blockquote>

<p>Si vous rajoutez des guillemets ou des apostrophes, la variables stockera alors la chaÃ®ne de caractÃ¨res <strong>true ou la chaÃ®ne de caractÃ¨res false.</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// a et b sctockent un valeur de type boolean</span>
<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="kc">false</span>

<span class="c1">//c stocke la chaine de caractÃ¨re true//</span>
<span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">true</span><span class="dl">"</span>

</code></pre></div></div>

<h3 id="autres-valeurs-stockÃ©es-en-javascript">Autres valeurs stockÃ©es en JavaScript</h3>

<p>Les variables en JavaScript peuvent stocker bien dâ€™autres valeurs nâ€™Ã©tant pas de type <em>String, Number ou Boolean.</em></p>

<p><img src="/images/null.png" alt="null" /></p>

<p>Parmi les autres valeurs remarquables, on peut citer la valeur <em>Â«nullÂ»</em>, qui correspond <strong>Ã  la non connaissance Ã  priori de la valeur ainsi que la valeur <em>Â«undefinedÂ»</em> qui correspond au fait de ne pas avoir dÃ©fini de valeur pour notre variable.</strong></p>

<p>Une variable peut encore contenir la valeur Â« NaN Â» qui signifie Â« Not a Number Â» (Â« nâ€™est pas un nombre Â» en FranÃ§ais).</p>

<h1 id="operations-sur-les-variables-en-javascript">OPERATIONS SUR LES VARIABLES EN JAVASCRIPT</h1>

<p>Pour des variables stockant des valeurs de type Number, on va donc pouvoir effectuer les mÃªmes opÃ©rations quâ€™avec des nombres en mathÃ©matiques.</p>

<p>Ainsi, nous allons pouvoir additionner (les valeurs de) deux variables entre elles, les soustraire lâ€™une Ã  lâ€™autre, les multiplier entre elles, etc.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">18</span><span class="p">,</span> <span class="nx">z</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>

<span class="c1">//on ajoute 1 Ã  la valeur de c qui stocke maitenant 6</span>
<span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

<span class="c1">//On soustrait 4 a x, x vaut maitenant 2</span>
<span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">-</span> <span class="mi">4</span><span class="p">;</span>

<span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">*</span> <span class="mi">2</span> <span class="c1">//y contient maintenant 20</span>

<span class="cm">/*On multiplie la derniere valeur contenu dan x (4) par la derniÃ¨re
* valeur contenu dans y (20). On stocke le resultat (80) dans une
*nouvelle variable q'on appelera mult*/</span>

<span class="kd">var</span> <span class="nx">mult</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">y</span><span class="p">;</span>

<span class="cm">/* On divise la derniere valeur contenue dans y par celle contenu dans z
*On stocke le rÃ©sultat (20/(-2) = -18) dans une varilable divi */</span>
<span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">/</span> <span class="nx">z</span><span class="p">;</span>

<span class="cm">/* le modulo represente le reste de ka division entiÃ¨re d'une nombre par autre
*Par exemple, si on divise 13 par 3 et qu'on ne conserve que la partie entiÃ¨re ,
*le rÃ©sultat est 4 et il reste 1. 1 est le modulo.*/</span>
<span class="kd">var</span> <span class="nx">mod</span> <span class="o">=</span> <span class="mi">13</span> <span class="o">%</span> <span class="mi">3</span><span class="p">;</span>

</code></pre></div></div>
<p><strong>Le modulo correspond au reste de la division entiÃ¨re dâ€™un nombre par un autre. On utilise le signe Â« % Â» pour le calculer.</strong></p>

<h3 id="prioritÃ©-de-calcul">PrioritÃ© de calcul</h3>

<p>Faites attention Ã  respecter les prioritÃ©s de calcul lorsque vous effectuez des opÃ©rations sur les variables.</p>

<p>En rÃ©alitÃ©, câ€™est trÃ¨s simple puisque ce sont les mÃªmes quâ€™en mathÃ©matiques : <em>les parenthÃ¨ses sont prioritaires sur toute autre opÃ©ration, puis viennent la multiplication, la division et le modulo et finalement lâ€™addition et la soustraction.</em></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">z</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>

<span class="c1">// Les prioritÃ© de calcul sont les memes qu'ne math</span>
<span class="kd">var</span> <span class="nx">prior</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">/</span> <span class="p">(</span> <span class="mi">4</span> <span class="o">+</span> <span class="nx">z</span> <span class="p">)</span> <span class="o">%</span> <span class="mi">3</span><span class="p">;</span>

<span class="nx">alert</span><span class="p">(</span><span class="nx">prior</span><span class="p">);</span>

<span class="c1">// 7</span>
</code></pre></div></div>

<p>Ici, on commence par calculer ce qui est <em>entre parenthÃ¨ses</em>, câ€™est-Ã -dire <code class="highlighter-rouge">4 + z</code> ce qui nous donne <code class="highlighter-rouge">4 + (-2) = 2.</code></p>

<p>Ensuite, on divise donc la valeur contenue dans y par 2 ce qui nous donne 5 et on calcule le modulo de 5 par 3 qui est Ã©gal Ã  2.</p>

<p>Finalement, on additionne la valeur contenue dans x et 2 pour arriver au rÃ©sultat final : <code class="highlighter-rouge">7</code>.</p>

<p>Faites donc bien attention aux prioritÃ©s de calcul lorsque vous effectuez des manipulations sur les variables, car le rÃ©sultat peut sâ€™avÃ©rer totalement diffÃ©rent de celui attendu si vous nâ€™en tenez pas compte.</p>

<h3 id="opÃ©rations-simplifiÃ©es-sur-les-variables-javascript">OpÃ©rations simplifiÃ©es sur les variables JavaScript</h3>

<p>Sachez que lâ€™on peut simplifier lâ€™Ã©criture de <em>certaines opÃ©rations mathÃ©matiques sur les variables en JavaScript</em>, afin de <strong>gagner en temps, en performance et en clartÃ©.</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="p">,</span> <span class="nx">z</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>
<span class="c1">//Equivaut Ã  "x = x + 2", x = x - 3</span>

<span class="nx">x</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
<span class="nx">X</span> <span class="o">-=</span> <span class="mi">3</span><span class="p">;</span>
<span class="c1">// VOUS AVEZ COMPRIS !</span>
<span class="nx">x</span> <span class="o">*=</span> <span class="mi">3</span><span class="p">;</span>
<span class="nx">y</span> <span class="o">%=</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">...</span>
</code></pre></div></div>
<p>Si vous Ã¨tes arrivÃ© jusque lÃ , bravo!</p>
:ET